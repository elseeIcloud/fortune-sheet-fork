export default {
  generalDialog: {
    partiallyError:
      "Невозможно выполнить эту операцию над частично объединенными ячейками",
    readOnlyError:
      "Невозможно выполнить эту операцию в режиме только для чтения",
    dataNullError:
      "Невозможно выполнить эту операцию над несуществующими данными",
    noSeletionError: "Операция выбора еще не выполнена",
    cannotSelectMultiple: "Невозможно выбрать несколько выделений",
  },
  functionlist: [
    {
      n: "SUMIF",
      t: 0,
      d: "Returns a conditional sum across a range.",
      a: "A conditional sum across a range.",
      m: [2, 3],
      p: [
        {
          name: "range",
          detail: "The range which is tested against `criterion`.",
          example: "A1:A10",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "criterion",
          detail: "The pattern or test to apply to `range`.",
          example: '">20"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "sum_range",
          detail: "The range to be summed, if different from `range`.",
          example: "B1:B10",
          require: "o",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "TAN",
      t: 0,
      d: "Returns the tangent of an angle provided in radians.",
      a: "Tangent of an angle provided in radians.",
      m: [1, 1],
      p: [
        {
          name: "angle",
          detail: "The angle to find the tangent of, in radians.",
          example: "45*PI()/180",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "TANH",
      t: 0,
      d: "Returns the hyperbolic tangent of any real number.",
      a: "Hyperbolic tangent of any real number.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "Any real value to calculate the hyperbolic tangent of.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "CEILING",
      t: 0,
      d: "Rounds a number up to the nearest integer multiple of specified significance `factor`.",
      a: "Rounds number up to nearest multiple of a factor.",
      m: [2, 2],
      p: [
        {
          name: "value",
          detail:
            "The value to round up to the nearest integer multiple of `factor`.",
          example: "23.25",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "factor",
          detail: "The number to whose multiples `value` will be rounded.",
          example: "0.1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "ATAN",
      t: 0,
      d: "Returns the inverse tangent of a value, in radians.",
      a: "Inverse tangent of a value, in radians.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The value for which to calculate the inverse tangent.",
          example: "0",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "ASINH",
      t: 0,
      d: "Returns the inverse hyperbolic sine of a number.",
      a: "Inverse hyperbolic sine of a number.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail:
            "The value for which to calculate the inverse hyperbolic sine.",
          example: "0.9",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "ABS",
      t: 0,
      d: "Returns the absolute value of a number.",
      a: "Absolute value of a number.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The number of which to return the absolute value.",
          example: "-2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "ACOS",
      t: 0,
      d: "Returns the inverse cosine of a value, in radians.",
      a: "Inverse cosine of a value, in radians.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail:
            "The value for which to calculate the inverse cosine. Must be between `-1` and `1`, inclusive.",
          example: "0",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "ACOSH",
      t: 0,
      d: "Returns the inverse hyperbolic cosine of a number.",
      a: "Inverse hyperbolic cosine of a number.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail:
            "The value for which to calculate the inverse hyperbolic cosine. Must be greater than or equal to `1`.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "MULTINOMIAL",
      t: 0,
      d: "Returns the factorial of the sum of values divided by the product of the values' factorials.",
      a: "Multinomial distribution function.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first value or range to consider.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail: "Additional values or ranges to consider.",
          example: "2",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "ATANH",
      t: 0,
      d: "Returns the inverse hyperbolic tangent of a number.",
      a: "Inverse hyperbolic tangent of a number.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail:
            "The value for which to calculate the inverse hyperbolic tangent. Must be between -1 and 1, exclusive.",
          example: "0.9",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "ATAN2",
      t: 0,
      d: "Returns the angle between the x-axis and a line segment from the origin (0,0) to specified coordinate pair (`x`,`y`), in radians.",
      a: "Arctangent of a value.",
      m: [2, 2],
      p: [
        {
          name: "x",
          detail:
            "The x coordinate of the endpoint of the line segment for which to calculate the angle from the x-axis.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "y",
          detail:
            "The y coordinate of the endpoint of the line segment for which to calculate the angle from the x-axis.",
          example: "3",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "COUNTBLANK",
      t: 1,
      d: "Returns the number of empty values in a list of values and ranges.",
      a: "Number of empty values.",
      m: [1, 1],
      p: [
        {
          name: "value1",
          detail:
            "The first value or range in which to count the number of blanks.",
          example: "A2:C100",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "COSH",
      t: 0,
      d: "Returns the hyperbolic cosine of any real number.",
      a: "Hyperbolic cosine of any real number.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "Any real value to calculate the hyperbolic cosine of.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "INT",
      t: 0,
      d: "Rounds a number down to the nearest integer that is less than or equal to it.",
      a: "Rounds number down to nearest integer.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The value to round down to the nearest integer.",
          example: "99.44",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "ISEVEN",
      t: 0,
      d: "Checks whether the provided value is even.",
      a: "Whether the provided value is even.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The value to be verified as even.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "ISODD",
      t: 0,
      d: "Checks whether the provided value is odd.",
      a: "Whether the provided value is odd.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The value to be verified as odd.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "LCM",
      t: 0,
      d: "Returns the least common multiple of one or more integers.",
      a: "Least common multiple of one or more integers.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail:
            "The first value or range whose factors to consider in a calculation to find the least common multiple.",
          example: "A2:A5",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail:
            "Additional values or ranges whose factors to consider to find the least common multiple.",
          example: "3",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "LN",
      t: 0,
      d: "Returns the logarithm of a number, base e (Euler's number).",
      a: "The logarithm of a number, base e (euler's number).",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The value for which to calculate the logarithm, base e.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "LOG",
      t: 0,
      d: "Returns the logarithm of a number with respect to a base.",
      a: "The logarithm of a number with respect to a base.",
      m: [1, 2],
      p: [
        {
          name: "value",
          detail: "The value for which to calculate the logarithm.",
          example: "128",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "base",
          detail: "The base to use for calculation of the logarithm.",
          example: "2",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "LOG10",
      t: 0,
      d: "Returns the logarithm of a number, base 10.",
      a: "The logarithm of a number, base 10.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The value for which to calculate the logarithm, base 10.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "MOD",
      t: 0,
      d: "Returns the result of the modulo operator, the remainder after a division operation.",
      a: "Modulo (remainder) operator.",
      m: [2, 2],
      p: [
        {
          name: "dividend",
          detail: "The number to be divided to find the remainder.",
          example: "10",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "divisor",
          detail: "The number to divide by.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "MROUND",
      t: 0,
      d: "Rounds one number to the nearest integer multiple of another.",
      a: "Rounds a number to the nearest integer multiple.",
      m: [2, 2],
      p: [
        {
          name: "value",
          detail:
            "The number to round to the nearest integer multiple of another.",
          example: "21",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "factor",
          detail: "The number to whose multiples `value` will be rounded.",
          example: "14",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "ODD",
      t: 0,
      d: "Rounds a number up to the nearest odd integer.",
      a: "Rounds a number up to the nearest odd integer.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The value to round to the next greatest odd number.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SUMSQ",
      t: 0,
      d: "Returns the sum of the squares of a series of numbers and/or cells.",
      a: "Sum of squares.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first number or range whose squares to add together.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail:
            "Additional numbers or ranges whose squares to add to the square(s) of `value1`.",
          example: "2",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "COMBIN",
      t: 0,
      d: "Returns the number of ways to choose some number of objects from a pool of a given size of objects.",
      a: "Number of combinations from a set of objects.",
      m: [2, 2],
      p: [
        {
          name: "n",
          detail: "The size of the pool of objects to choose from.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "k",
          detail: "The number of objects to choose.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SUM",
      t: 0,
      d: "Returns the sum of a series of numbers and/or cells.",
      a: "Sum of a series of numbers and/or cells.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first number or range to add together.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail: "Additional numbers or ranges to add to `value1`.",
          example: "2",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "SUBTOTAL",
      t: 0,
      d: "Returns a subtotal for a vertical range of cells using a specified aggregation function.",
      a: "Subtotal for a range using a specific function.",
      m: [2, 256],
      p: [
        {
          name: "function_code",
          detail: "The function to use in subtotal aggregation.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "range1",
          detail: "The first range over which to calculate a subtotal.",
          example: "A2:A5",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "range2",
          detail: "Additional ranges over which to calculate subtotals.",
          example: "B2:B8",
          require: "o",
          repeat: "y",
          type: "range",
        },
      ],
    },
    {
      n: "ASIN",
      t: 0,
      d: "Returns the inverse sine of a value, in radians.",
      a: "Inverse sine of a value, in radians.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail:
            "The value for which to calculate the inverse sine. Must be between `-1` and `1`, inclusive.",
          example: "0",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "COUNTIF",
      t: 1,
      d: "Returns a conditional count across a range.",
      a: "A conditional count across a range.",
      m: [2, 2],
      p: [
        {
          name: "range",
          detail: "The range that is tested against `criterion`.",
          example: "A1:A10",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "criterion",
          detail: "The pattern or test to apply to `range`.",
          example: '">20"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "RADIANS",
      t: 0,
      d: "Converts an angle value in degrees to radians.",
      a: "Converts an angle value in degrees to radians.",
      m: [1, 1],
      p: [
        {
          name: "angle",
          detail: "The angle to convert from degrees to radians.",
          example: "180",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "RAND",
      t: 0,
      d: "Returns a random number between 0 inclusive and 1 exclusive.",
      a: "A random number between 0 inclusive and 1 exclusive.",
      m: [0, 0],
      p: [],
    },
    {
      n: "COUNTUNIQUE",
      t: 0,
      d: "Counts the number of unique values in a list of specified values and ranges.",
      a: "Counts number of unique values in a range.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first value or range to consider for uniqueness.",
          example: "A1:C100",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail: "Additional values or ranges to consider for uniqueness.",
          example: "1",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "DEGREES",
      t: 0,
      d: "Converts an angle value in radians to degrees.",
      a: "Converts an angle value in radians to degrees.",
      m: [1, 1],
      p: [
        {
          name: "angle",
          detail: "The angle to convert from radians to degrees.",
          example: "PI()",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "ERFC",
      t: 9,
      d: "Returns the complementary Gauss error function of a value.",
      a: "Complementary gauss error function of a value.",
      m: [1, 1],
      p: [
        {
          name: "z",
          detail:
            "The number for which to calculate the complementary Gauss error function.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "EVEN",
      t: 0,
      d: "Rounds a number up to the nearest even integer.",
      a: "Rounds a number up to the nearest even integer.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The value to round to the next greatest even number.",
          example: "3",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "EXP",
      t: 0,
      d: "Returns Euler's number, e (~2.718) raised to a power.",
      a: "Euler's number, e (~2.718) raised to a power.",
      m: [1, 1],
      p: [
        {
          name: "exponent",
          detail: "The exponent to raise e to.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "FACT",
      t: 0,
      d: "Returns the factorial of a number.",
      a: "Factorial of a number.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail:
            "The number or reference to a number whose factorial will be calculated and returned.",
          example: "3",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "FACTDOUBLE",
      t: 0,
      d: 'Returns the "double factorial" of a number.',
      a: '"double factorial" of a number.',
      m: [1, 1],
      p: [
        {
          name: "value",
          detail:
            "The number or reference to a number whose double factorial will be calculated and returned.",
          example: "6",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "PI",
      t: 0,
      d: "Returns the value of Pi to 14 decimal places.",
      a: "The number pi.",
      m: [0, 0],
      p: [],
    },
    {
      n: "FLOOR",
      t: 0,
      d: "Rounds a number down to the nearest integer multiple of specified significance `factor`.",
      a: "Rounds number down to nearest multiple of a factor.",
      m: [2, 2],
      p: [
        {
          name: "value",
          detail:
            "The value to round down to the nearest integer multiple of `factor`.",
          example: "23.25",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "factor",
          detail: "The number to whose multiples `value` will be rounded.",
          example: "0.1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "GCD",
      t: 0,
      d: "Returns the greatest common divisor of one or more integers.",
      a: "Greatest common divisor of one or more integers.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail:
            "The first value or range whose factors to consider in a calculation to find the greatest common divisor.",
          example: "A2:A5",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail:
            "Additional values or ranges whose factors to consider to find the greatest common divisor.",
          example: "96",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "RANDBETWEEN",
      t: 0,
      d: "Returns a uniformly random integer between two values, inclusive.",
      a: "Random integer between two values, inclusive.",
      m: [2, 2],
      p: [
        {
          name: "low",
          detail: "The low end of the random range.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "high",
          detail: "The high end of the random range.",
          example: "10",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "ROUND",
      t: 0,
      d: "Rounds a number to a certain number of decimal places according to standard rules.",
      a: "Rounds a number according to standard rules.",
      m: [2, 2],
      p: [
        {
          name: "value",
          detail: "The value to round to `places` number of places.",
          example: "99.44",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "places",
          detail: "The number of decimal places to which to round.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "ROUNDDOWN",
      t: 0,
      d: "Rounds a number to a certain number of decimal places, always rounding down to the next valid increment.",
      a: "Rounds down a number.",
      m: [2, 2],
      p: [
        {
          name: "value",
          detail:
            "The value to round to `places` number of places, always rounding down.",
          example: "99.44",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "places",
          detail: "The number of decimal places to which to round.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "ROUNDUP",
      t: 0,
      d: "Rounds a number to a certain number of decimal places, always rounding up to the next valid increment.",
      a: "Rounds up a number.",
      m: [2, 2],
      p: [
        {
          name: "value",
          detail:
            "The value to round to `places` number of places, always rounding up.",
          example: "99.44",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "places",
          detail: "The number of decimal places to which to round.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SERIESSUM",
      t: 0,
      d: "Given parameters `x`, `n`, `m`, and `a`, returns the power series sum a",
      a: "Sum of a power series.",
      m: [4, 4],
      p: [
        {
          name: "x",
          detail:
            "The input to the power series. Varies depending on the type of approximation, may be angle, exponent, or some other value.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "n",
          detail:
            "The initial power to which to raise `x` in the power series.",
          example: "0",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "m",
          detail: "The additive increment by which to increase `x`.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "a",
          detail:
            "The array or range containing the coefficients of the power series.",
          example: "{FACT(0)",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SIGN",
      t: 0,
      d: "Given an input number, returns `-1` if it is negative, `1` if positive, and `0` if it is zero.",
      a: "Sign of a provided number (+/-/0).",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The value whose sign will be evaluated.",
          example: "-42",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SIN",
      t: 0,
      d: "Returns the sine of an angle provided in radians.",
      a: "Sine of an angle provided in radians.",
      m: [1, 1],
      p: [
        {
          name: "angle",
          detail: "The angle to find the sine of, in radians.",
          example: "PI()",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SINH",
      t: 0,
      d: "Returns the hyperbolic sine of any real number.",
      a: "Hyperbolic sine of any real number.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "Any real value to calculate the hyperbolic sine of.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SQRT",
      t: 0,
      d: "Returns the positive square root of a positive number.",
      a: "Positive square root of a positive number.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The number for which to calculate the positive square root.",
          example: "9",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SQRTPI",
      t: 0,
      d: "Returns the positive square root of the product of Pi and the given positive number.",
      a: "Square root of the product of pi and number.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail:
            "The number which will be multiplied by Pi and have the product's square root returned",
          example: "9",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "GAMMALN",
      t: 1,
      d: "Returns the logarithm of a specified Gamma function, base e (Euler's number).",
      a: "Logarithm of gamma function.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail:
            "The input to the Gamma function. The natural logarithm of Gamma(`value`) will be returned.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "COS",
      t: 0,
      d: "Returns the cosine of an angle provided in radians.",
      a: "Cosine of an angle provided in radians.",
      m: [1, 1],
      p: [
        {
          name: "angle",
          detail: "The angle to find the cosine of, in radians.",
          example: "PI()",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "TRUNC",
      t: 0,
      d: "Truncates a number to a certain number of significant digits by omitting less significant digits.",
      a: "Truncates a number.",
      m: [1, 2],
      p: [
        {
          name: "value",
          detail: "The value to be truncated.",
          example: "3.141592654",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "places",
          detail:
            "The number of significant digits to the right of the decimal point to retain.",
          example: "2",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "QUOTIENT",
      t: 0,
      d: "Returns one number divided by another.",
      a: "One number divided by another.",
      m: [2, 2],
      p: [
        {
          name: "dividend",
          detail: "The number to be divided.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "divisor",
          detail: "The number to divide by.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "POWER",
      t: 0,
      d: "Returns a number raised to a power.",
      a: "A number raised to a power.",
      m: [2, 2],
      p: [
        {
          name: "base",
          detail: "The number to raise to the `exponent` power.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "exponent",
          detail: "The exponent to raise `base` to.",
          example: "0.5",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SUMIFS",
      t: 0,
      d: "Returns the sum of a range depending on multiple criteria.",
      a: "Sums a range depending on multiple criteria.",
      m: [3, 257],
      p: [
        {
          name: "sum_range",
          detail: "The range to sum.",
          example: "A1:A10",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "criteria_range1",
          detail: "The range to check against criterion1.",
          example: " B1:B10",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "criterion1",
          detail: "The pattern or test to apply to criteria_range1.",
          example: ' ">20"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "criteria_range2",
          detail: "Additional ranges to check.",
          example: " C1:C10",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "COUNTIFS",
      t: 1,
      d: "Returns the count of a range depending on multiple criteria.",
      a: "Count values depending on multiple criteria.",
      m: [2, 256],
      p: [
        {
          name: "criteria_range1",
          detail: "The range to check against `criterion1`.",
          example: "A1:A10",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "criterion1",
          detail: "The pattern or test to apply to `criteria_range1`.",
          example: ' ">20"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "criteria_range2",
          detail: "Additional ranges to check.",
          example: " B1:B10",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "PRODUCT",
      t: 0,
      d: "Returns the result of multiplying a series of numbers together.",
      a: "Result of multiplying a series of numbers together.",
      m: [1, 255],
      p: [
        {
          name: "factor1",
          detail: "The first number or range to calculate for the product.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "factor2",
          detail: "More numbers or ranges to calculate for the product.",
          example: "2",
          require: "o",
          repeat: "y",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "HARMEAN",
      t: 1,
      d: "Calculates the harmonic mean of a dataset.",
      a: "The harmonic mean of a dataset.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first value or range of the population.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value2",
          detail: "Additional values or ranges to include in the population.",
          example: "2",
          require: "o",
          repeat: "y",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "HYPGEOMDIST",
      t: 1,
      d: "Calculates the probability of drawing a certain number of successes in a certain number of tries given a population of a certain size containing a certain number of successes, without replacement of draws.",
      a: "Hypergeometric distribution probability.",
      m: [5, 5],
      p: [
        {
          name: "num_successes",
          detail: "The desired number of successes.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "num_draws",
          detail: "The number of permitted draws.",
          example: "12",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "successes_in_pop",
          detail: "The total number of successes in the population.",
          example: "20",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "pop_size",
          detail: "The total size of the population",
          example: "40",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "cumulative",
          detail:
            "Determine the logical value of the function form. \n\nIf cumulative is TRUE(), HYPGEOM.DIST returns the cumulative distribution function;\n\nif FALSE(), it returns the probability density function.",
          example: "TRUE()",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "INTERCEPT",
      t: 1,
      d: "Calculates the y-value at which the line resulting from linear regression of a dataset will intersect the y-axis (x=0).",
      a: "Y-intercept of line derived via linear regression.",
      m: [2, 2],
      p: [
        {
          name: "data_y",
          detail:
            "The range representing the array or matrix of dependent data.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "data_x",
          detail:
            "The range representing the array or matrix of independent data.",
          example: "B2:B100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "KURT",
      t: 1,
      d: 'Calculates the kurtosis of a dataset, which describes the shape, and in particular the "peakedness" of that dataset.',
      a: "Kurtosis of a dataset.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first value or range of the dataset.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value2",
          detail: "Additional values or ranges to include in the dataset.",
          example: "2",
          require: "o",
          repeat: "y",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "LARGE",
      t: 1,
      d: "Returns the nth largest element from a data set, where n is user-defined.",
      a: "Nth largest element from a data set.",
      m: [2, 2],
      p: [
        {
          name: "data",
          detail: "Array or range containing the dataset to consider.",
          example: "A2:B100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "n",
          detail: "The rank from largest to smallest of the element to return.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "STDEVA",
      t: 1,
      d: "Calculates the standard deviation based on a sample, setting text to the value `0`.",
      a: "Standard deviation of sample (text as 0).",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first value or range of the sample.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value2",
          detail: "Additional values or ranges to include in the sample.",
          example: "2",
          require: "o",
          repeat: "y",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "STDEVP",
      t: 1,
      d: "Calculates the standard deviation based on an entire population.",
      a: "Standard deviation of an entire population.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first value or range of the population.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value2",
          detail: "Additional values or ranges to include in the population.",
          example: "2",
          require: "o",
          repeat: "y",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "GEOMEAN",
      t: 1,
      d: "Calculates the geometric mean of a dataset.",
      a: "The geometric mean of a dataset.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first value or range of the population.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail: "Additional values or ranges to include in the population.",
          example: "2",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "RANK_EQ",
      t: 1,
      d: "Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the top rank of the entries will be returned.",
      a: "Top rank of a specified value in a dataset.",
      m: [2, 3],
      p: [
        {
          name: "value",
          detail: "The value whose rank will be determined.",
          example: "A10",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "data",
          detail: "The array or range containing the dataset to consider.",
          example: "A1:A100",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "is_ascending",
          detail:
            "Whether to consider the values in `data` in descending or ascending order. If omitted, the default is descending (FALSE).",
          example: "TRUE()",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "RANK_AVG",
      t: 1,
      d: "Returns the rank of a specified value in a dataset. If there is more than one entry of the same value in the dataset, the average rank of the entries will be returned.",
      a: "Average rank of a specified value in a dataset.",
      m: [2, 3],
      p: [
        {
          name: "value",
          detail: "The value whose rank will be determined.",
          example: "A10",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "data",
          detail: "The array or range containing the dataset to consider.",
          example: "A1:A100",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "is_ascending",
          detail:
            "Whether to consider the values in `data` in descending or ascending order. If omitted, the default is descending (FALSE).",
          example: "TRUE()",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "PERCENTRANK_EXC",
      t: 1,
      d: "Returns the percentage rank (percentile) from 0 to 1 exclusive of a specified value in a dataset.",
      a: "Percentage rank (percentile) from 0 to 1 exclusive.",
      m: [2, 3],
      p: [
        {
          name: "data",
          detail: "The array or range containing the dataset to consider.",
          example: "A1:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value",
          detail: "The value whose percentage rank will be determined.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "significant_digits",
          detail:
            "The number of significant figures to use in the calculation. Default is 3.",
          example: "4",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "PERCENTRANK_INC",
      t: 1,
      d: "Returns the percentage rank (percentile) from 0 to 1 inclusive of a specified value in a dataset.",
      a: "Percentage rank (percentile) from 0 to 1 inclusive.",
      m: [2, 3],
      p: [
        {
          name: "data",
          detail: "The array or range containing the dataset to consider.",
          example: "A1:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value",
          detail: "The value whose percentage rank will be determined.",
          example: " A2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "significant_digits",
          detail:
            "The number of significant figures to use in the calculation. Default is 3.",
          example: "4",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "FORECAST",
      t: 1,
      d: "Calculates the expected y-value for a specified x based on a linear regression of a dataset.",
      a: "Expected y-value based of linear regression.",
      m: [3, 3],
      p: [
        {
          name: "x",
          detail: "The value on the x-axis to forecast.",
          example: "A1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "data_y",
          detail:
            "The range representing the array or matrix of dependent data.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "data_x",
          detail:
            "The range representing the array or matrix of independent data.",
          example: "B2:B100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "FISHERINV",
      t: 1,
      d: "Returns the inverse Fisher transformation of a specified value.",
      a: "Inverse fisher transformation of a specified value.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail:
            "The value for which to calculate the inverse Fisher transformation.",
          example: "0.962",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "FISHER",
      t: 1,
      d: "Returns the Fisher transformation of a specified value.",
      a: "Fisher transformation of a specified value.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The value for which to calculate the Fisher transformation.",
          example: "0.962",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "MODE_SNGL",
      t: 1,
      d: "Returns the most commonly occurring value in a dataset.",
      a: "Most commonly occurring value in a dataset.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first value or range to consider when calculating mode.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value2",
          detail:
            "Additional values or ranges to consider when calculating mode.",
          example: "B2:B100",
          require: "o",
          repeat: "y",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "WEIBULL_DIST",
      t: 1,
      d: "Returns the value of the Weibull distribution function (or Weibull cumulative distribution function) for a specified shape and scale.",
      a: "Weibull distribution function.",
      m: [4, 4],
      p: [
        {
          name: "x",
          detail: "The input to the Weibull distribution function.",
          example: "2.4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "shape",
          detail: "The shape parameter of the Weibull distribution function.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "scale",
          detail: "The scale parameter of the Weibull distribution function.",
          example: "3",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "cumulative",
          detail: "Whether to use the cumulative distribution function.",
          example: "TRUE()",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "COUNT",
      t: 1,
      d: "Returns the number of numeric values in a dataset.",
      a: "The number of numeric values in dataset.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first value or range to consider when counting.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail: "Additional values or ranges to consider when counting.",
          example: "B2:B100",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "COUNTA",
      t: 1,
      d: "Returns the number of values in a dataset.",
      a: "The number of values in a dataset.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first value or range to consider when counting.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail: "Additional values or ranges to consider when counting.",
          example: "B2:B100",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "AVEDEV",
      t: 1,
      d: "Calculates the average of the magnitudes of deviations of data from a dataset's mean.",
      a: "Average magnitude of deviations from mean.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first value or range of the sample.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value2",
          detail: "Additional values or ranges to include in the sample.",
          example: "2",
          require: "o",
          repeat: "y",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "AVERAGE",
      t: 1,
      d: "Returns the numerical average value in a dataset, ignoring text.",
      a: "Numerical average value in a dataset, ignoring text.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail:
            "The first value or range to consider when calculating the average value.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail:
            "Additional values or ranges to consider when calculating the average value.",
          example: "B2:B100",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "AVERAGEA",
      t: 1,
      d: "Returns the numerical average value in a dataset.",
      a: "Numerical average value in a dataset.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail:
            "The first value or range to consider when calculating the average value.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail:
            "Additional values or ranges to consider when calculating the average value.",
          example: "B2:B100",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "BINOM_DIST",
      t: 1,
      d: "Calculates the probability of drawing a certain number of successes (or a maximum number of successes) in a certain number of tries given a population of a certain size containing a certain number of successes, with replacement of draws.",
      a: "Binomial distribution probability.",
      m: [4, 4],
      p: [
        {
          name: "num_successes",
          detail:
            "The number of successes for which to calculate the probability in `num_trials` trials.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "num_trials",
          detail: "The number of independent trials.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "prob_success",
          detail: "The probability of success in any given trial.",
          example: "0.005",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "cumulative",
          detail: "Whether to use the binomial cumulative distribution.",
          example: "FALSE()",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "BINOM_INV",
      t: 1,
      d: "Calculates the smallest value for which the cumulative binomial distribution is greater than or equal to a specified criteria.",
      a: "Inverse cumulative binomial distribution function.",
      m: [3, 3],
      p: [
        {
          name: "num_trials",
          detail: "The number of independent trials.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "prob_success",
          detail: "The probability of success in any given trial.",
          example: "0.005",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "target_prob",
          detail: "The desired threshold probability.",
          example: "0.8",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "CONFIDENCE_NORM",
      t: 1,
      d: "Calculates the width of half the confidence interval for a normal distribution.",
      a: "Confidence interval for a normal distribution.",
      m: [3, 3],
      p: [
        {
          name: "alpha",
          detail:
            "One minus the desired confidence level. E.g. `0.1` for `0.9`, or 90%, confidence.",
          example: "0.05",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "standard_deviation",
          detail: "The standard deviation of the population.",
          example: "1.6",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "pop_size",
          detail: "The size of the population.",
          example: "250",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "CORREL",
      t: 1,
      d: "Calculates r, the Pearson product-moment correlation coefficient of a dataset.",
      a: "Pearson Product-Moment Correlation Coefficient.",
      m: [2, 2],
      p: [
        {
          name: "data_y",
          detail:
            "The range representing the array or matrix of dependent data.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "data_x",
          detail:
            "The range representing the array or matrix of independent data.",
          example: "B2:B100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "COVARIANCE_P",
      t: 1,
      d: "Calculates the covariance of a dataset.",
      a: "The covariance of a dataset.",
      m: [2, 2],
      p: [
        {
          name: "data_y",
          detail:
            "The range representing the array or matrix of dependent data.",
          example: "B2:B100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "data_x",
          detail:
            "The range representing the array or matrix of independent data.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "COVARIANCE_S",
      t: 1,
      d: "Calculates the sample covariance of a dataset.",
      a: "The sample covariance of a dataset.",
      m: [2, 2],
      p: [
        {
          name: "data_y",
          detail:
            "The range representing the array or matrix of dependent data.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "data_x",
          detail:
            "The range representing the array or matrix of independent data.",
          example: "B2:B100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DEVSQ",
      t: 1,
      d: "Calculates the sum of squares of deviations based on a sample.",
      a: "The sum of squares of deviations based on a sample.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first value or range of the sample.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value2",
          detail: "Additional values or ranges to include in the sample.",
          example: "2",
          require: "o",
          repeat: "y",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "EXPON_DIST",
      t: 1,
      d: "Returns the value of the exponential distribution function with a specified lambda at a specified value.",
      a: "Exponential distribution function.",
      m: [3, 3],
      p: [
        {
          name: "x",
          detail: "The input to the exponential distribution function.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "lambda",
          detail:
            "The lambda to specify the exponential distribution function.",
          example: "0.5",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "cumulative",
          detail: "Whether to use the exponential cumulative distribution.",
          example: "FALSE()",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "AVERAGEIF",
      t: 1,
      d: "Returns the average of a range depending on criteria.",
      a: "Average of values depending on criteria.",
      m: [2, 3],
      p: [
        {
          name: "criteria_range",
          detail: "The range to check against `criterion`.",
          example: "A1:A10",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "criterion",
          detail: "The pattern or test to apply to `criteria_range`.",
          example: '">20"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "average_range",
          detail:
            "The range to average. If not included, `criteria_range` is used for the average instead.",
          example: "B1:B10",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "AVERAGEIFS",
      t: 1,
      d: "Returns the average of a range depending on multiple criteria.",
      a: "Average of values depending on multiple criteria.",
      m: [2, 255],
      p: [
        {
          name: "average_range",
          detail: "The range to average.",
          example: "A1:A10",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "criteria_range1",
          detail: "The range to check against `criterion1`.",
          example: " B1:B10",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "criterion1",
          detail: "The pattern or test to apply to `criteria_range1`.",
          example: ' ">20"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "criteria_range2",
          detail: "Additional ranges to check.",
          example: " C1:C10",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "PERMUT",
      t: 1,
      d: "Returns the number of ways to choose some number of objects from a pool of a given size of objects, considering order.",
      a: "Number of permutations from a number of objects.",
      m: [2, 2],
      p: [
        {
          name: "n",
          detail: "The size of the pool of objects to choose from.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "k",
          detail: "The number of objects to choose.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "TRIMMEAN",
      t: 1,
      d: "Calculates the mean of a dataset excluding some proportion of data from the high and low ends of the dataset.",
      a: "Mean of a dataset excluding high/low ends.",
      m: [2, 2],
      p: [
        {
          name: "data",
          detail: "Array or range containing the dataset to consider.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "exclude_proportion",
          detail:
            "The proportion of the dataset to exclude, from the extremities of the set.",
          example: "0.1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "PERCENTILE_EXC",
      t: 1,
      d: "Returns the value at a given percentile of a dataset exclusive of 0 and 1.",
      a: "Value at a given percentile of a dataset exclusive of 0 and 1.",
      m: [2, 2],
      p: [
        {
          name: "data",
          detail: "The array or range containing the dataset to consider.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "percentile",
          detail:
            "The percentile, exclusive of 0 and 1, whose value within 'data' will be calculated and returned.",
          example: "0.25",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "PERCENTILE_INC",
      t: 1,
      d: "Returns the value at a given percentile of a dataset.",
      a: "Value at a given percentile of a dataset.",
      m: [2, 2],
      p: [
        {
          name: "data",
          detail: "The array or range containing the dataset to consider.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "percentile",
          detail:
            "The percentile whose value within `data` will be calculated and returned.`",
          example: "0.25",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "PEARSON",
      t: 1,
      d: "Calculates r, the Pearson product-moment correlation coefficient of a dataset.",
      a: "Pearson Product-Moment Correlation Coefficient.",
      m: [2, 2],
      p: [
        {
          name: "data_y",
          detail:
            "The range representing the array or matrix of dependent data.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "data_x",
          detail:
            "The range representing the array or matrix of independent data.",
          example: "B2:B100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "NORM_S_INV",
      t: 1,
      d: "Returns the value of the inverse standard normal distribution function for a specified value.",
      a: "Inverse standard normal distribution function.",
      m: [1, 1],
      p: [
        {
          name: "x",
          detail:
            "The input to the inverse standard normal distribution function.",
          example: "0.75",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "NORM_S_DIST",
      t: 1,
      d: "Returns the value of the standard normal cumulative distribution function for a specified value.",
      a: "Standard normal cumulative distribution function.",
      m: [2, 2],
      p: [
        {
          name: "x",
          detail:
            "The input to the standard normal cumulative distribution function.",
          example: "2.4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "cumulative",
          detail:
            "Determine the logical value of the function form. \n\nIf TRUE(), it returns the cumulative distribution function;\n\nIf it is FALSE(), it returns the probability density function.",
          example: "FALSE()",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "NORM_INV",
      t: 1,
      d: "Returns the value of the inverse normal distribution function for a specified value, mean, and standard deviation.",
      a: "Inverse normal distribution function.",
      m: [3, 3],
      p: [
        {
          name: "x",
          detail: "The input to the inverse normal distribution function.",
          example: "0.75",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "mean",
          detail: "The mean (mu) of the normal distribution function.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "standard_deviation",
          detail:
            "The standard deviation (sigma) of the normal distribution function.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "NORM_DIST",
      t: 1,
      d: "Returns the value of the normal distribution function (or normal cumulative distribution function) for a specified value, mean, and standard deviation.",
      a: "Normal distribution function.",
      m: [4, 4],
      p: [
        {
          name: "x",
          detail: "The input to the normal distribution function.",
          example: "2.4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "mean",
          detail: "The mean (mu) of the normal distribution function.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "standard_deviation",
          detail:
            "The standard deviation (sigma) of the normal distribution function.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "cumulative",
          detail:
            "Whether to use the normal cumulative distribution function rather than the distribution function.",
          example: "FALSE()",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "NEGBINOM_DIST",
      t: 1,
      d: "Calculates the probability of drawing a certain number of failures before a certain number of successes given a probability of success in independent trials.",
      a: "Negative binomial distribution probability.",
      m: [4, 4],
      p: [
        {
          name: "num_failures",
          detail: "The number of failures to model.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "num_successes",
          detail: "The number of successes to model.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "prob_success",
          detail: "The probability of success in any given trial.",
          example: "0.1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "cumulative",
          detail:
            "Determine the logical value of the function form. \n\nIf TRUE(), it returns the cumulative distribution function;\n\nIf it is FALSE(), it returns the probability density function.",
          example: "FALSE()",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "MINA",
      t: 1,
      d: "Returns the minimum numeric value in a dataset.",
      a: "Minimum numeric value in a dataset.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail:
            "The first value or range to consider when calculating the minimum value.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value2",
          detail:
            "Additional values or ranges to consider when calculating the minimum value.",
          example: "B2:B100",
          require: "o",
          repeat: "y",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "MIN",
      t: 1,
      d: "Returns the minimum value in a numeric dataset.",
      a: "Minimum value in a numeric dataset.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail:
            "The first value or range to consider when calculating the minimum value.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value2",
          detail:
            "Additional values or ranges to consider when calculating the minimum value.",
          example: "B2:B100",
          require: "o",
          repeat: "y",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "MEDIAN",
      t: 1,
      d: "Returns the median value in a numeric dataset.",
      a: "Median value in a numeric dataset.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail:
            "The first value or range to consider when calculating the median value.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value2",
          detail:
            "Additional values or ranges to consider when calculating the median value.",
          example: "B2:B100",
          require: "o",
          repeat: "y",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "MAXA",
      t: 1,
      d: "Returns the maximum numeric value in a dataset.",
      a: "Maximum numeric value in a dataset.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail:
            "The first value or range to consider when calculating the maximum value.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value2",
          detail:
            "Additional values or ranges to consider when calculating the maximum value.",
          example: "B2:B100",
          require: "o",
          repeat: "y",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "MAX",
      t: 1,
      d: "Returns the maximum value in a numeric dataset.",
      a: "Maximum value in a numeric dataset.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail:
            "The first value or range to consider when calculating the maximum value.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value2",
          detail:
            "Additional values or ranges to consider when calculating the maximum value.",
          example: "B2:B100",
          require: "o",
          repeat: "y",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "LOGNORM_INV",
      t: 1,
      d: "Returns the value of the inverse log-normal cumulative distribution with given mean and standard deviation at a specified value.",
      a: "Inverse log-normal cumulative distribution function.",
      m: [3, 3],
      p: [
        {
          name: "x",
          detail:
            "The input to the inverse log-normal cumulative distribution function.",
          example: "0.4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "mean",
          detail:
            "The mean (mu) of the inverse log-normal cumulative distribution function.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "standard_deviation",
          detail:
            "The standard deviation (sigma) of the inverse log-normal cumulative distribution function.",
          example: "6",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "LOGNORM_DIST",
      t: 1,
      d: "Returns the value of the log-normal cumulative distribution with given mean and standard deviation at a specified value.",
      a: "Log-normal cumulative distribution probability.",
      m: [4, 4],
      p: [
        {
          name: "x",
          detail:
            "The input to the log-normal cumulative distribution function.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "mean",
          detail:
            "The mean (mu) of the log-normal cumulative distribution function.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "standard_deviation",
          detail:
            "The standard deviation (sigma) of the log-normal cumulative distribution function.",
          example: "6",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "cumulative",
          detail:
            "Determine the logical value of the function form. \n\nIf TRUE(), it returns the cumulative distribution function;\n\nIf it is FALSE(), it returns the probability density function.",
          example: "FALSE()",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "Z_TEST",
      t: 1,
      d: "Returns the one-tailed p-value of a Z-test with standard distribution.",
      a: "One-tailed p-value of a z-test.",
      m: [2, 3],
      p: [
        {
          name: "data",
          detail: "The array or range containing the dataset to consider.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "value",
          detail: "The test statistic to use in the Z-test.",
          example: "B2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "standard_deviation",
          detail:
            "The standard deviation to assume for the Z-test. If this is not provided, the standard deviation of the data will be used.",
          example: "3",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "PROB",
      t: 1,
      d: "Given a set of values and corresponding probabilities, calculates the probability that a value chosen at random falls between two limits.",
      a: "Probability values lie in a range.",
      m: [3, 4],
      p: [
        {
          name: "data",
          detail: "Array or range containing the dataset to consider.",
          example: "A3:A6",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "probabilities",
          detail:
            "Array or range containing probabilities corresponding to `data`.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "low_limit",
          detail:
            "The lower bound on the value range for which to calculate the probability.",
          example: "3",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "high_limit",
          detail:
            "The upper bound on the value range for which to calculate the probability.",
          example: "4",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "QUARTILE_EXC",
      t: 1,
      d: "Returns a value nearest to a specified quartile of a dataset exclusive of 0 and 4.",
      a: "Value nearest to a specific quartile of a dataset exclusive of 0 and 4.",
      m: [2, 2],
      p: [
        {
          name: "data",
          detail: "The array or range containing the dataset to consider.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "quartile_number",
          detail: "Which quartile to return.",
          example: "3",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "QUARTILE_INC",
      t: 1,
      d: "Returns a value nearest to a specified quartile of a dataset.",
      a: "Value nearest to a specific quartile of a dataset.",
      m: [2, 2],
      p: [
        {
          name: "data",
          detail: "The array or range containing the dataset to consider.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "quartile_number",
          detail: "Which quartile value to return.",
          example: "3",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "POISSON_DIST",
      t: 1,
      d: "Returns the value of the Poisson distribution function (or Poisson cumulative distribution function) for a specified value and mean.",
      a: "Poisson distribution function.",
      m: [3, 3],
      p: [
        {
          name: "x",
          detail: "The input to the Poisson distribution function.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "mean",
          detail: "The mean (mu) of the Poisson distribution function.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "cumulative",
          detail:
            "Whether to use the Poisson cumulative distribution function rather than the distribution function.",
          example: "FALSE()",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "RSQ",
      t: 1,
      d: "Calculates the square of r, the Pearson product-moment correlation coefficient of a dataset.",
      a: "Square of the correlation coefficient.",
      m: [2, 2],
      p: [
        {
          name: "data_y",
          detail:
            "The range representing the array or matrix of dependent data.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "data_x",
          detail:
            "The range representing the array or matrix of independent data.",
          example: "B2:B100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "T_DIST",
      t: 1,
      d: "Calculates the left tail probability for a Student's t-distribution with a given input (x).",
      a: "The left-tailed Student's t-distribution",
      m: [3, 3],
      p: [
        {
          name: "x",
          detail: "The input to the t-distribution function.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "degrees_freedom",
          detail: "The number of degrees of freedom.",
          example: "30",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "cumulative",
          detail:
            "If cumulative is TRUE, T.DIST returns the cumulative distribution function; if FALSE, it returns the probability density function.",
          example: "TRUE()",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "T_DIST_2T",
      t: 1,
      d: "Calculates the probability for two tailed Student's t-distribution with a given input (x).",
      a: "The two tailed Student's t-distribution",
      m: [2, 2],
      p: [
        {
          name: "x",
          detail: "The input to the t-distribution function.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "degrees_freedom",
          detail: "The number of degrees of freedom.",
          example: "30",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "T_DIST_RT",
      t: 1,
      d: "Calculates the right tail probability for a Student's t-distribution with a given input (x).",
      a: "The right-tailed Student's t-distribution",
      m: [2, 2],
      p: [
        {
          name: "x",
          detail: "The input to the t-distribution function.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "degrees_freedom",
          detail: "The number of degrees of freedom.",
          example: "30",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "T_INV",
      t: 1,
      d: "Calculates the negative inverse of the one-tailed TDIST function.",
      a: "T.INV",
      m: [2, 2],
      p: [
        {
          name: "probability",
          detail:
            "The probability associated with the two-tailed t-distribution.",
          example: "0.35",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "degrees_freedom",
          detail: "The number of degrees of freedom.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "T_INV_2T",
      t: 1,
      d: "Calculates the inverse of the two-tailed TDIST function.",
      a: "T.INV.2T",
      m: [2, 2],
      p: [
        {
          name: "probability",
          detail:
            "The probability associated with the two-tailed t-distribution.",
          example: "0.35",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "degrees_freedom",
          detail: "The number of degrees of freedom.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "T_TEST",
      t: 1,
      d: "t-test. Returns the probability associated with Student's t-test. Determines whether two samples are likely to have come from the same two underlying populations that have the same mean.",
      a: "Returns the probability associated with t-test.",
      m: [4, 4],
      p: [
        {
          name: "range1",
          detail:
            "The first sample of data or group of cells to consider for the t-test.",
          example: "A1:A4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "range2",
          detail:
            "The second sample of data or group of cells to consider for the t-test.",
          example: "B1:B4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "tails",
          detail: "Specifies the number of distribution tails.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "type",
          detail: "Specifies the type of t-test.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "F_DIST",
      t: 1,
      d: "Calculates the left-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor's F distribution.",
      a: "F probability distribution (left-tailed).",
      m: [4, 4],
      p: [
        {
          name: "x",
          detail:
            "The input to the F probability distribution function. The value at which to evaluate the function.",
          example: "15.35",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "degrees_freedom1",
          detail: "The numerator of the number of degrees of freedom.",
          example: "7",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "degrees_freedom2",
          detail: "The denominator of the number of degrees of freedom.",
          example: "6",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "cumulative",
          detail: "Logical value that determines the form of the function.",
          example: "TRUE()",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "F_DIST_RT",
      t: 1,
      d: "Calculates the right-tailed F probability distribution (degree of diversity) for two data sets with given input x. Alternately called Fisher-Snedecor distribution or Snedecor's F distribution.",
      a: "F probability distribution.",
      m: [3, 3],
      p: [
        {
          name: "x",
          detail:
            "The input to the F probability distribution function. The value at which to evaluate the function.",
          example: "15.35",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "degrees_freedom1",
          detail: "The numerator of the number of degrees of freedom.",
          example: "7",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "degrees_freedom2",
          detail: "The denominator of the number of degrees of freedom.",
          example: "6",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "VAR_P",
      t: 1,
      d: "Calculates the variance based on an entire population.",
      a: "Variance of entire population.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first value or range of the population.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value2",
          detail: "Additional values or ranges to include in the population.",
          example: "2",
          require: "o",
          repeat: "y",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "VAR_S",
      t: 1,
      d: "Calculates the variance based on a sample.",
      a: "Variance.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first value or range of the sample.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value2",
          detail: "Additional values or ranges to include in the sample.",
          example: "2",
          require: "o",
          repeat: "y",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "VARA",
      t: 1,
      d: "Calculates the variance based on a sample, setting text to the value `0`.",
      a: "Variance of sample (text as 0).",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first value or range of the sample.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value2",
          detail: "Additional values or ranges to include in the sample.",
          example: "2",
          require: "o",
          repeat: "y",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "VARPA",
      t: 1,
      d: "Calculates the variance based on an entire population, setting text to the value `0`.",
      a: "Variance of entire population (text as 0).",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first value or range of the population.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value2",
          detail: "Additional values or ranges to include in the population.",
          example: "2",
          require: "o",
          repeat: "y",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "STEYX",
      t: 1,
      d: "Calculates the standard error of the predicted y-value for each x in the regression of a dataset.",
      a: "Standard error of predicted y-values in regression.",
      m: [2, 2],
      p: [
        {
          name: "data_y",
          detail:
            "The range representing the array or matrix of dependent data.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "data_x",
          detail:
            "The range representing the array or matrix of independent data.",
          example: "B2:B100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "STANDARDIZE",
      t: 1,
      d: "Calculates the normalized equivalent of a random variable given mean and standard deviation of the distribution.",
      a: "Normalized equivalent of a random variable.",
      m: [3, 3],
      p: [
        {
          name: "value",
          detail: "The value of the random variable to normalize.",
          example: "96",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "mean",
          detail: "The mean of the distribution.",
          example: "80",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "standard_deviation",
          detail: "The standard deviation of the distribution.",
          example: "6.7",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SMALL",
      t: 1,
      d: "Returns the nth smallest element from a data set, where n is user-defined.",
      a: "Nth smallest element in a data set.",
      m: [2, 2],
      p: [
        {
          name: "data",
          detail: "The array or range containing the dataset to consider.",
          example: "A2:B100",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "n",
          detail: "The rank from smallest to largest of the element to return.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SLOPE",
      t: 1,
      d: "Calculates the slope of the line resulting from linear regression of a dataset.",
      a: "Slope of line from linear regression of data.",
      m: [2, 2],
      p: [
        {
          name: "data_y",
          detail:
            "The range representing the array or matrix of dependent data.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "data_x",
          detail:
            "The range representing the array or matrix of independent data.",
          example: "B2:B100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SKEW",
      t: 1,
      d: "Calculates the skewness of a dataset, which describes the symmetry of that dataset about the mean.",
      a: "Skewness of a dataset.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first value or range of the dataset.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail: "Additional values or ranges to include in the dataset.",
          example: "2",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "SKEW_P",
      t: 1,
      d: "Calculates the skewness of a dataset, which describes the symmetry of that dataset about the mean. This assumes the dataset is for the population.",
      a: "Skewness of a population's dataset.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first value or range of the dataset.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail: "Additional values or ranges to include in the dataset.",
          example: "2",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "VLOOKUP",
      t: 2,
      d: "Vertical lookup. Searches down the first column of a range for a key and returns the value of a specified cell in the row found.",
      a: "Vertical lookup.",
      m: [3, 4],
      p: [
        {
          name: "search_key",
          detail:
            'The value to search for. For example, `42`, `"Cats"`, or `I24`.',
          example: "10003",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "range",
          detail:
            "The range to consider for the search. The first column in the range is searched for the key specified in `search_key`.",
          example: "A2:B26",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "index",
          detail:
            "The column index of the value to be returned, where the first column in `range` is numbered 1.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "is_sorted",
          detail:
            "Indicates whether the column to be searched (the first column of the specified range) is sorted, in which case the closest match for `search_key` will be returned.",
          example: "FALSE()",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "HLOOKUP",
      t: 2,
      d: "Horizontal lookup. Searches across the first row of a range for a key and returns the value of a specified cell in the column found.",
      a: "Horizontal lookup",
      m: [3, 4],
      p: [
        {
          name: "search_key",
          detail:
            'The value to search for. For example, `42`, `"Cats"`, or `I24`.',
          example: "10003",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "range",
          detail:
            "The range to consider for the search. The first row in the range is searched for the key specified in `search_key`.",
          example: "A2:Z6",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "index",
          detail:
            "The row index of the value to be returned, where the first row in `range` is numbered 1.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "is_sorted",
          detail:
            "Indicates whether the row to be searched (the first row of the specified range) is sorted.",
          example: "FALSE()",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "LOOKUP",
      t: 2,
      d: "Looks through a sorted row or column for a key and returns the value of the cell in a result range located in the same position as the search row or column.",
      a: "Look up a value.",
      m: [2, 3],
      p: [
        {
          name: "search_key",
          detail:
            'The value to search for in the row or column. For example, `42`, `"Cats"`, or `I24`.',
          example: "10003",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "search_range|search_result_array",
          detail:
            "One method of using this function is to provide a single sorted row or column `search_range` to look through for the `search_key` with a second argument `result_range`. The other way is to combine these two arguments into one `search_result_array` where the first row or column is searched and a value is returned from the last row or column in the array. If `search_key` is not found, a non-exact match may be returned.",
          example: "A1:A100",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "result_range",
          detail:
            "The range from which to return a result. The value returned corresponds to the location where `search_key` is found in `search_range`. This range must be only a single row or column and should not be used if using the `search_result_array` method.",
          example: "B1:B100",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "ADDRESS",
      t: 2,
      d: "Returns a cell reference as a string.",
      a: "Cell reference as a string.",
      m: [2, 5],
      p: [
        {
          name: "row",
          detail: "The row number of the cell reference",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "column",
          detail:
            "The column number (not name) of the cell reference. `A` is column number `1`.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "absolute_relative_mode",
          detail:
            "An indicator of whether the reference is row/column absolute. `1` is row and column absolute (e.g. $A$1), `2` is row absolute and column relative (e.g. A$1), `3` is row relative and column absolute (e.g. $A1), and `4` is row and column relative (e.g. A1).",
          example: "4",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "use_a1_notation",
          detail:
            "A boolean indicating whether to use `A1` style notation (TRUE) or `R1C1` style notation (FALSE).",
          example: "FALSE()",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "sheet",
          detail:
            "Text indicating the name of the sheet into which the address points.",
          example: '"Sheet2"',
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "INDIRECT",
      t: 2,
      d: "Returns a cell reference specified by a string.",
      a: "A cell reference specified by a string.",
      m: [1, 2],
      p: [
        {
          name: "cell_reference_as_string",
          detail:
            "A cell reference, written as a string with surrounding quotation marks.",
          example: '"Sheet2!"&B10',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "is_A1_notation",
          detail:
            "Indicates if the cell reference is in A1 notation (TRUE) or R1C1 notation (FALSE).",
          example: "FALSE()",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "ROW",
      t: 2,
      d: "Returns the row number of a specified cell.",
      a: "Row number of a specified cell.",
      m: [0, 1],
      p: [
        {
          name: "cell_reference",
          detail: "The cell whose row number will be returned.",
          example: "A9",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "ROWS",
      t: 2,
      d: "Returns the number of rows in a specified array or range.",
      a: "Number of rows in a specified array or range.",
      m: [1, 1],
      p: [
        {
          name: "range",
          detail: "The range whose row count will be returned.",
          example: "A9:A62",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "COLUMN",
      t: 2,
      d: "Returns the column number of a specified cell, with `A=1`.",
      a: "Column number of a specified cell.",
      m: [0, 1],
      p: [
        {
          name: "cell_reference",
          detail:
            "The cell whose column number will be returned. Column `A` corresponds to `1`.",
          example: "A9",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "COLUMNS",
      t: 2,
      d: "Returns the number of columns in a specified array or range.",
      a: "Number of columns in a specified array or range.",
      m: [1, 1],
      p: [
        {
          name: "range",
          detail: "The range whose column count will be returned.",
          example: "A9:W62",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "OFFSET",
      t: 2,
      d: "Returns a range reference shifted a specified number of rows and columns from a starting cell reference.",
      a: "A range reference offset relative to a cell.",
      m: [3, 5],
      p: [
        {
          name: "cell_reference",
          detail:
            "The starting point from which to count the offset rows and columns.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "offset_rows",
          detail: "The number of rows to offset by.",
          example: "3",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "offset_columns",
          detail: "The number of columns to offset by.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "height",
          detail:
            "The height of the range to return starting at the offset target.",
          example: "2",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "width",
          detail:
            "The width of the range to return starting at the offset target.",
          example: "2",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "MATCH",
      t: 2,
      d: "Returns the relative position of an item in a range that matches a specified value.",
      a: "Position of item in range that matches value.",
      m: [2, 3],
      p: [
        {
          name: "search_key",
          detail:
            'The value to search for. For example, `42`, `"Cats"`, or `I24`.',
          example: '"Sunday"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "range",
          detail: "The one-dimensional array to be searched.",
          example: "A2:A9",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "search_type",
          detail:
            "The search method. `1` (default) finds the largest value less than or equal to `search_key` when `range` is sorted in ascending order. `0` finds the exact value when `range` is unsorted. `-1` finds the smallest value greater than or equal to `search_key` when `range` is sorted in descending order.",
          example: "0",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "INDEX",
      t: 2,
      d: "Returns the content of a cell, specified by row and column offset.",
      a: "Content of cell specified by row and column offset.",
      m: [2, 3],
      p: [
        {
          name: "reference",
          detail: "The array of cells to be offset into.",
          example: "A1:C20",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "row",
          detail: "The number of offset rows.",
          example: "5",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "column",
          detail: "The number of offset columns.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "GETPIVOTDATA",
      t: 2,
      d: "Extracts an aggregated value from a pivot table that corresponds to the specified row and column headings.",
      a: "Extracts an aggregated value from a pivot table that corresponds to the specified row and column headings.",
      m: [2, 254],
      p: [
        {
          name: "value_name",
          detail:
            "The name of the value in the pivot table for which you want to get data.",
          example: '"SUM of number of units"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "any_pivot_table_cell",
          detail:
            "Any reference to a cell in the desired pivot table (top corner recommended).",
          example: "'Pivot table'!A1",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "original_column",
          detail:
            "The name of the column in the original data set (not the pivot table).",
          example: '"division"',
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
        {
          name: "pivot_item",
          detail:
            "The name of the row or column shown in the pivot table corresponding to *original_column* that you want to retrieve.",
          example: '"east"',
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "CHOOSE",
      t: 2,
      d: "Returns an element from a list of choices based on index.",
      a: "An element from a list of choices based on index.",
      m: [2, 255],
      p: [
        {
          name: "index",
          detail: "Which choice (of the up to 30 provided) to return.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "choice1",
          detail:
            "A potential value to return. Required. May be a reference to a cell or an individual value.",
          example: '"A"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "choice2",
          detail: "Additional values among which to choose.",
          example: '"B"',
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "HYPERLINK",
      t: 2,
      d: "Creates a hyperlink inside a cell.",
      a: "Creates a hyperlink inside a cell.",
      p: [
        {
          name: "url",
          detail:
            "The full URL of the link location enclosed in quotation marks, or a reference to a cell containing such a URL.",
          example: '"http://www.luckysheet.com/"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "link_label",
          detail:
            "The text to display in the cell as the link, enclosed in quotation marks, or a reference to a cell containing such a label.",
          example: '"luckysheet"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "TIME",
      t: 6,
      d: "Converts a provided hour, minute, and second into a time.",
      a: "Converts hour/minute/second into a time.",
      m: [3, 3],
      p: [
        {
          name: "hour",
          detail: "The hour component of the time.",
          example: "11",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "minute",
          detail: "The minute component of the time.",
          example: "40",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "second",
          detail: "The second component of the time.",
          example: "59",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "TIMEVALUE",
      t: 6,
      d: "Returns the fraction of a 24-hour day the time represents.",
      a: "Converts a time string into its serial number representation.",
      m: [1, 1],
      p: [
        {
          name: "time_string",
          detail: "The string that holds the time representation.",
          example: '"2:15 PM"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "EOMONTH",
      t: 6,
      d: "Returns a date on the last day of a month that falls a specified number of months before or after another date.",
      a: "Last day of a month before or after a date.",
      m: [2, 2],
      p: [
        {
          name: "start_date",
          detail: "The date from which to calculate the result.",
          example: "DATE(1969",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "months",
          detail:
            "The number of months before (negative) or after (positive) 'start_date' to consider.",
          example: "7",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "EDATE",
      t: 6,
      d: "Returns a date a specified number of months before or after another date.",
      a: "Date a number of months before/after another date.",
      m: [2, 2],
      p: [
        {
          name: "start_date",
          detail: "The date from which to calculate the result.",
          example: "DATE(1969",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "months",
          detail:
            "The number of months before (negative) or after (positive) 'start_date' to calculate.",
          example: "7",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SECOND",
      t: 6,
      d: "Returns the second component of a specific time, in numeric format.",
      a: "Second component of a specific time.",
      m: [1, 1],
      p: [
        {
          name: "time",
          detail: "The time from which to calculate the second component",
          example: "TIME(11",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "MINUTE",
      t: 6,
      d: "Returns the minute component of a specific time, in numeric format.",
      a: "Minute component of a specific time.",
      m: [1, 1],
      p: [
        {
          name: "time",
          detail: "The time from which to calculate the minute component.",
          example: "TIME(11",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "HOUR",
      t: 6,
      d: "Returns the hour component of a specific time, in numeric format.",
      a: "Hour component of a specific time.",
      m: [1, 1],
      p: [
        {
          name: "time",
          detail: "The time from which to calculate the hour component.",
          example: "TIME(11",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "NOW",
      t: 6,
      d: "Returns the current date and time as a date value.",
      a: "Current date and time as a date value.",
      m: [0, 0],
      p: [],
    },
    {
      n: "NETWORKDAYS",
      t: 6,
      d: "Returns the number of net working days between two provided days.",
      a: "Net working days between two provided days.",
      m: [2, 3],
      p: [
        {
          name: "start_date",
          detail:
            "The start date of the period from which to calculate the number of net working days.",
          example: "DATE(1969",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "end_date",
          detail:
            "The end date of the period from which to calculate the number of net working days.",
          example: "7",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "holidays",
          detail:
            "A range or array constant containing the date serial numbers to consider holidays.",
          example: "16)",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "NETWORKDAYS_INTL",
      t: 6,
      d: "Returns the number of net working days between two provided days excluding specified weekend days and holidays.",
      a: "Net working days between two dates (specifying weekends).",
      m: [2, 4],
      p: [
        {
          name: "start_date",
          detail:
            "The start date of the period from which to calculate the number of net working days.",
          example: "DATE(1969",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "end_date",
          detail:
            "The end date of the period from which to calculate the number of net working days.",
          example: "7",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "weekend",
          detail:
            "A number or string representing which days of the week are considered weekends.",
          example: "16)",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "holidays",
          detail:
            "A range or array constant containing the dates to consider as holidays.",
          example: "DATE(1969",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "ISOWEEKNUM",
      t: 6,
      d: "Returns a number representing the ISO week of the year where the provided date falls.",
      a: "ISO week number of the year.",
      m: [1, 1],
      p: [
        {
          name: "date",
          detail:
            "The date for which to determine the ISO week number. Must be a reference to a cell containing a date, a function returning a date type, or a number.",
          example: "DATE(1969",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "WEEKNUM",
      t: 6,
      d: "Returns a number representing the week of the year where the provided date falls.",
      a: "Week number of the year.",
      m: [1, 2],
      p: [
        {
          name: "date",
          detail:
            "The date for which to determine the week number. Must be a reference to a cell containing a date, a function returning a date type, or a number.",
          example: "DATE(1969",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "type",
          detail:
            "A number representing the day that a week starts on. Sunday = 1.",
          example: "7",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "WEEKDAY",
      t: 6,
      d: "Returns a number representing the day of the week of the date provided.",
      a: "Day of the week of the date provided (as number).",
      m: [1, 2],
      p: [
        {
          name: "date",
          detail:
            "The date for which to determine the day of the week. Must be a reference to a cell containing a date, a function returning a date type, or a number.",
          example: "DATE(1969",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "type",
          detail:
            "A number indicating which numbering system to use to represent weekdays. By default, counts starting with Sunday = 1.",
          example: "7",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DAY",
      t: 6,
      d: "Returns the day of the month that a specific date falls on, in numeric format.",
      a: "Day of the month that a specific date falls on.",
      m: [1, 1],
      p: [
        {
          name: "date",
          detail: "The date from which to extract the day.",
          example: "DATE(1969",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "DAYS",
      t: 6,
      d: "Returns the number of days between two dates.",
      a: "Number of days between two dates.",
      m: [2, 2],
      p: [
        {
          name: "end_date",
          detail: "The end of the date range.",
          example: "2011-3-15",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "start_date",
          detail: "The start of the date range.",
          example: "2011-2-1",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "DAYS360",
      t: 6,
      d: "Returns the difference between two days based on the 360 day year used in some financial interest calculations.",
      a: "Days between two dates on a 360-day year.",
      m: [2, 3],
      p: [
        {
          name: "start_date",
          detail:
            "The start date to consider in the calculation. Must be a reference to a cell containing a date, a function returning a date type, or a number.",
          example: "DATE(1969",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "end_date",
          detail:
            "The end date to consider in the calculation. Must be a reference to a cell containing a date, a function returning a date type, or a number.",
          example: "7",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "method",
          detail: "An indicator of what day count method to use.",
          example: "FALSE()",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "DATE",
      t: 6,
      d: "Converts a provided year, month, and day into a date.",
      a: "Converts year/month/day into a date.",
      m: [3, 3],
      p: [
        {
          name: "year",
          detail: "The year component of the date.",
          example: "1969",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "month",
          detail: "The month component of the date.",
          example: "7",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day",
          detail: "The day component of the date.",
          example: "20",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DATEVALUE",
      t: 6,
      d: "Converts a provided date string in a known format to a date value.",
      a: "Converts a date string to a date value.",
      m: [1, 1],
      p: [
        {
          name: "date_string",
          detail: "The string representing the date.",
          example: '"1969-7-20"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "DATEDIF",
      t: 6,
      d: "Calculates the number of days, months, or years between two dates.",
      a: "Date Difference.",
      m: [3, 3],
      p: [
        {
          name: "start_date",
          detail:
            "The start date to consider in the calculation. Must be a reference to a cell containing a date, a function returning a date type, or a number.",
          example: "DATE(1969",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "end_date",
          detail:
            "The end date to consider in the calculation. Must be a reference to a cell containing a date, a function returning a date type, or a number.",
          example: "7",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "unit",
          detail:
            'A string abbreviation for unit of time. For example, "M" for month. Accepted values are "Y","M","D","MD","YM","YD".',
          example: "16)",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "WORKDAY",
      t: 6,
      d: "Calculates the date after a number of working days from a specified start date.",
      a: "Number of working days from start date.",
      m: [2, 3],
      p: [
        {
          name: "start_date",
          detail: "The date from which to begin counting.",
          example: "DATE(1969",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "num_days",
          detail:
            "The number of working days to advance from `start_date`. If negative, counts backwards.",
          example: "7",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "holidays",
          detail:
            "A range or array constant containing the dates to consider holidays.",
          example: "16)",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "WORKDAY_INTL",
      t: 6,
      d: "Calculates the date after a specified number of workdays excluding specified weekend days and holidays.",
      a: "Date after a number of workdays (specifying weekends).",
      m: [2, 4],
      p: [
        {
          name: "start_date",
          detail: "The date from which to begin counting.",
          example: "DATE(1969",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "num_days",
          detail:
            "The number of working days to advance from `start_date`. If negative, counts backwards.",
          example: "7",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "weekend",
          detail:
            "A number or string representing which days of the week are considered weekends.",
          example: "16)",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "holidays",
          detail:
            "A range or array constant containing the dates to consider holidays.",
          example: "DATE(1969",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "YEAR",
      t: 6,
      d: "Returns the year specified by a given date.",
      a: "Year specified by a given date.",
      m: [1, 1],
      p: [
        {
          name: "date",
          detail: "The date from which to extract the year.",
          example: "DATE(1969",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "YEARFRAC",
      t: 6,
      d: "Returns the number of years, including fractional years, between two dates using a specified day count convention.",
      a: "Exact number of years between two dates.",
      m: [2, 3],
      p: [
        {
          name: "start_date",
          detail:
            "The start date to consider in the calculation. Must be a reference to a cell containing a date, a function returning a date type, or a number.",
          example: "DATE(1969",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "end_date",
          detail:
            "The end date to consider in the calculation. Must be a reference to a cell containing a date, a function returning a date type, or a number.",
          example: "7",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "16)",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "TODAY",
      t: 6,
      d: "Returns the current date as a date value.",
      a: "Current date as a date value.",
      m: [0, 0],
      p: [],
    },
    {
      n: "MONTH",
      t: 6,
      d: "Returns the month of the year a specific date falls in, in numeric format.",
      a: "Month of the year a specific date falls in.",
      m: [1, 1],
      p: [
        {
          name: "date",
          detail: "The date from which to extract the month.",
          example: "DATE(1969",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "EFFECT",
      t: 8,
      d: "Calculates the annual effective interest rate given the nominal rate and number of compounding periods per year.",
      a: "Annual effective interest rate.",
      m: [2, 2],
      p: [
        {
          name: "nominal_rate",
          detail: "The nominal interest rate per year.",
          example: "0.99",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "periods_per_year",
          detail: "The number of compounding periods per year.",
          example: "12",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DOLLAR",
      t: 12,
      d: "Formats a number into the currency specific to your spreadsheet locale.",
      a: "Formats a number as currency specific to your spreadsheet locale.",
      m: [1, 2],
      p: [
        {
          name: "number",
          detail: "The value to be formatted.",
          example: "1.2351",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "number_of_places",
          detail: "The number of decimal places to display.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DOLLARDE",
      t: 8,
      d: "Converts a price quotation given as a decimal fraction into a decimal value.",
      a: "Converts a decimal fraction to decimal value.",
      m: [2, 2],
      p: [
        {
          name: "fractional_price",
          detail:
            "The price quotation given using fractional decimal conventions.",
          example: "100.10",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "unit",
          detail:
            "The units of the fraction, e.g. `8` for 1/8ths or `32` for 1/32nds.",
          example: "32",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DOLLARFR",
      t: 8,
      d: "Converts a price quotation given as a decimal value into a decimal fraction.",
      a: "Converts a decimal value to decimal fraction.",
      m: [2, 2],
      p: [
        {
          name: "decimal_price",
          detail: "The price quotation given as a decimal value.",
          example: "100.125",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "unit",
          detail:
            "The units of the desired fraction, e.g. `8` for 1/8ths or `32` for 1/32nds.",
          example: "32",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DB",
      t: 8,
      d: "Calculates the depreciation of an asset for a specified period using the arithmetic declining balance method.",
      a: "Depreciation via declining balance method.",
      m: [4, 5],
      p: [
        {
          name: "cost",
          detail: "The initial cost of the asset.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "salvage",
          detail: "The value of the asset at the end of depreciation.",
          example: "50",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "life",
          detail: "The number of periods over which the asset is depreciated.",
          example: "10",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "period",
          detail:
            "The single period within `life` for which to calculate depreciation.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "month",
          detail: "The number of months in the first year of depreciation.",
          example: "10",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DDB",
      t: 8,
      d: "Calculates the depreciation of an asset for a specified period using the double-declining balance method.",
      a: "Depreciation via double-declining balance method.",
      m: [4, 5],
      p: [
        {
          name: "cost",
          detail: "The initial cost of the asset.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "salvage",
          detail: "The value of the asset at the end of depreciation.",
          example: "50",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "life",
          detail: "The number of periods over which the asset is depreciated.",
          example: "10",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "period",
          detail:
            "The single period within `life` for which to calculate depreciation.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "factor",
          detail: "The factor by which depreciation decreases.",
          example: "2.25",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "RATE",
      t: 8,
      d: "Calculates the interest rate of an annuity investment based on constant-amount periodic payments and the assumption of a constant interest rate.",
      a: "Interest rate of an annuity investment.",
      m: [3, 6],
      p: [
        {
          name: "number_of_periods",
          detail: "The number of payments to be made.",
          example: "12",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "payment_per_period",
          detail: "The amount per period to be paid.",
          example: "-100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "present_value",
          detail: "The current value of the annuity.",
          example: "400",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "future_value",
          detail:
            "The future value remaining after the final payment has been made.",
          example: "0",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "end_or_beginning",
          detail:
            "Whether payments are due at the end (`0`) or beginning (`1`) of each period.",
          example: "0",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "rate_guess",
          detail: "An estimate for what the interest rate will be.",
          example: "0.1",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "CUMPRINC",
      t: 8,
      d: "Calculates the cumulative principal paid over a range of payment periods for an investment based on constant-amount periodic payments and a constant interest rate.",
      a: "Cumulative principal paid over a set of periods.",
      m: [6, 6],
      p: [
        {
          name: "rate",
          detail: "The interest rate.",
          example: "0.12",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "number_of_periods",
          detail: "The number of payments to be made.",
          example: "12",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "present_value",
          detail: "The current value of the annuity.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "first_period",
          detail:
            "The number of the payment period to begin the cumulative calculation.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "last_period",
          detail:
            "The number of the payment period to end the cumulative calculation.",
          example: "5",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "end_or_beginning",
          detail:
            "Whether payments are due at the end (`0`) or beginning (`1`) of each period.",
          example: "0",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "COUPNUM",
      t: 8,
      d: "Calculates the number of coupons, or interest payments, between the settlement date and the maturity date of the investment.",
      a: "Number of coupons between settlement and maturity.",
      m: [3, 4],
      p: [
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail:
            "The maturity or end date of the security, when it can be redeemed at face, or par value.",
          example: "02",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "frequency",
          detail:
            "The number of interest or coupon payments per year (1, 2, or 4).",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "0",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SYD",
      t: 8,
      d: "Calculates the depreciation of an asset for a specified period using the sum of years digits method.",
      a: "Depreciation via sum of years digits method.",
      m: [4, 4],
      p: [
        {
          name: "cost",
          detail: "The initial cost of the asset.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "salvage",
          detail: "The value of the asset at the end of depreciation.",
          example: "50",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "life",
          detail: "The number of periods over which the asset is depreciated.",
          example: "10",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "period",
          detail:
            "The single period within `life` for which to calculate depreciation.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "TBILLEQ",
      t: 8,
      d: "Calculates the equivalent annualized rate of return of a US Treasury Bill based on discount rate.",
      a: "Equivalent rate of return for a Treasury bill.",
      m: [3, 3],
      p: [
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail:
            "The maturity or end date of the security, when it can be redeemed at face, or par value.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "discount",
          detail: "The discount rate of the bill at time of purchase.",
          example: "2)",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "TBILLYIELD",
      t: 8,
      d: "Calculates the yield of a US Treasury Bill based on price.",
      a: "The yield of a us treasury bill based on price.",
      m: [3, 3],
      p: [
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail:
            "The maturity or end date of the security, when it can be redeemed at face, or par value.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "price",
          detail:
            "The price at which the security is bought per 100 face value.",
          example: "95",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "TBILLPRICE",
      t: 8,
      d: "Calculates the price of a US Treasury Bill based on discount rate.",
      a: "Price of US treasury bill.",
      m: [3, 3],
      p: [
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail:
            "The maturity or end date of the security, when it can be redeemed at face, or par value.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "discount",
          detail: "The discount rate of the bill at time of purchase.",
          example: "0.09",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "PV",
      t: 8,
      d: "Calculates the present value of an annuity investment based on constant-amount periodic payments and a constant interest rate.",
      a: "Present value of an annuity investment.",
      m: [3, 5],
      p: [
        {
          name: "rate",
          detail: "The interest rate.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "number_of_periods",
          detail: "The number of payments to be made.",
          example: "12",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "payment_amount",
          detail: "The amount per period to be paid.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "future_value",
          detail:
            "The future value remaining after the final payment has been made.",
          example: "D2",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "end_or_beginning",
          detail:
            "Whether payments are due at the end (`0`) or beginning (`1`) of each period.",
          example: "1",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "ACCRINT",
      t: 8,
      d: "Calculates the accrued interest of a security that has periodic payments.",
      a: "Accrued interest of security with periodic payments.",
      m: [6, 8],
      p: [
        {
          name: "issue",
          detail: "The date the security was initially issued.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "first_payment",
          detail: "The first date interest will be paid.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "rate",
          detail: "The annualized rate of interest.",
          example: "0.1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "redemption",
          detail: "The redemption amount per 100 face value, or par.",
          example: "10000",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "frequency",
          detail:
            "The number of interest or coupon payments per year (1, 2, or 4).",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "0",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "calc_method",
          detail:
            "[Optional-defaults to TRUE()] - A logical value that specifies the method used to calculate the total accrued interest when the settlement date is later than the first interest accrual date. \n\nIf the value is TRUE, the total accrued interest from the issue date to the settlement date is returned. \n\nIf the value is FALSE, return the accrued interest from the first interest accrual date to the settlement date.",
          example: "TRUE()",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "ACCRINTM",
      t: 8,
      d: "Calculates the accrued interest of a security that pays interest at maturity.",
      a: "Accrued interest of security paying at maturity.",
      m: [4, 5],
      p: [
        {
          name: "issue",
          detail: "The date the security was initially issued.",
          example: "DATE(1969",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail: "The maturity date of the security.",
          example: "DATE(1969",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "rate",
          detail: "The annualized rate of interest.",
          example: "0.1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "redemption",
          detail: "The redemption amount per 100 face value, or par.",
          example: "1000",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "12",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "COUPDAYBS",
      t: 8,
      d: "Calculates the number of days from the first coupon, or interest payment, until settlement.",
      a: "Number of days from first coupon to settlement.",
      m: [3, 4],
      p: [
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail:
            "The maturity or end date of the security, when it can be redeemed at face, or par value.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "frequency",
          detail:
            "The number of interest or coupon payments per year (1, 2, or 4).",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "0",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "COUPDAYS",
      t: 8,
      d: "Calculates the number of days in the coupon, or interest payment, period that contains the specified settlement date.",
      a: "Days in coupon period containing settlement date.",
      m: [3, 4],
      p: [
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail:
            "The maturity or end date of the security, when it can be redeemed at face, or par value.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "frequency",
          detail:
            "The number of interest or coupon payments per year (1, 2, or 4).",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "0",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "COUPDAYSNC",
      t: 8,
      d: "Calculates the number of days from the settlement date until the next coupon, or interest payment.",
      a: "Days from settlement until next coupon.",
      m: [3, 4],
      p: [
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail:
            "The maturity or end date of the security, when it can be redeemed at face, or par value.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "frequency",
          detail:
            "The number of interest or coupon payments per year (1, 2, or 4).",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "0",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "COUPNCD",
      t: 8,
      d: "Calculates next coupon, or interest payment, date after the settlement date.",
      a: "Next coupon date after the settlement date.",
      m: [3, 4],
      p: [
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail:
            "The maturity or end date of the security, when it can be redeemed at face, or par value.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "frequency",
          detail:
            "The number of interest or coupon payments per year (1, 2, or 4).",
          example: "01)",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "DATE(2019",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "COUPPCD",
      t: 8,
      d: "Calculates last coupon, or interest payment, date before the settlement date.",
      a: "Last coupon date before settlement date.",
      m: [3, 4],
      p: [
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail:
            "The maturity or end date of the security, when it can be redeemed at face, or par value.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "frequency",
          detail:
            "The number of interest or coupon payments per year (1, 2, or 4).",
          example: "01)",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "DATE(2019",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "FV",
      t: 8,
      d: "Calculates the future value of an annuity investment based on constant-amount periodic payments and a constant interest rate.",
      a: "Future value of an annuity investment.",
      m: [3, 5],
      p: [
        {
          name: "rate",
          detail: "The interest rate.",
          example: "0.12",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "number_of_periods",
          detail: "The number of payments to be made.",
          example: "12",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "payment_amount",
          detail: "The amount per period to be paid.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "present_value",
          detail: "The current value of the annuity.",
          example: "400",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "end_or_beginning",
          detail:
            "Whether payments are due at the end (`0`) or beginning (`1`) of each period.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "FVSCHEDULE",
      t: 8,
      d: "Calculates the future value of some principal based on a specified series of potentially varying interest rates.",
      a: "Future value of principal from series of rates.",
      m: [2, 2],
      p: [
        {
          name: "principal",
          detail: "The amount of initial capital or value to compound against.",
          example: "10000",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "rate_schedule",
          detail:
            "A series of interest rates to compound against the `principal`.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "YIELD",
      t: 8,
      d: "Calculates the annual yield of a security paying periodic interest, such as a US Treasury Bond, based on price.",
      a: "Annual yield of a security paying periodic interest.",
      m: [6, 7],
      p: [
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail:
            "The maturity or end date of the security, when it can be redeemed at face, or par value.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "rate",
          detail: "The annualized rate of interest.",
          example: "0.057",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "price",
          detail:
            "The price at which the security is bought per 100 face value.",
          example: "95",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "redemption",
          detail: "The redemption amount per 100 face value, or par.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "frequency",
          detail:
            "The number of interest or coupon payments per year (1, 2, or 4).",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "0",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "YIELDDISC",
      t: 8,
      d: "Calculates the annual yield of a discount (non-interest-bearing) security, based on price.",
      a: "Annual yield of a discount security.",
      m: [4, 5],
      p: [
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail:
            "The maturity or end date of the security, when it can be redeemed at face, or par value.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "price",
          detail:
            "The price at which the security is bought per 100 face value.",
          example: "95",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "redemption",
          detail: "The redemption amount per 100 face value, or par.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "0",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "NOMINAL",
      t: 8,
      d: "Calculates the annual nominal interest rate given the effective rate and number of compounding periods per year.",
      a: "Annual nominal interest rate.",
      m: [2, 2],
      p: [
        {
          name: "effective_rate",
          detail: "The effective interest rate per year.",
          example: "0.85",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "periods_per_year",
          detail: "The number of compounding periods per year.",
          example: "12",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "XIRR",
      t: 8,
      d: "Calculates the internal rate of return of an investment based on a specified series of potentially irregularly spaced cash flows.",
      a: "Internal rate of return given non-periodic cashflows.",
      m: [2, 3],
      p: [
        {
          name: "cashflow_amounts",
          detail:
            "An array or range containing the income or payments associated with the investment.",
          example: "B2:B25",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "cashflow_dates",
          detail:
            "An array or range with dates corresponding to the cash flows in `cashflow_amounts`.",
          example: "C2:C25",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "rate_guess",
          detail: "An estimate for what the internal rate of return will be.",
          example: "250",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "MIRR",
      t: 8,
      d: "Calculates the modified internal rate of return on an investment based on a series of periodic cash flows and the difference between the interest rate paid on financing versus the return received on reinvested income.",
      a: "Modified internal rate of return.",
      m: [3, 3],
      p: [
        {
          name: "cashflow_amounts",
          detail:
            "An array or range containing the income or payments associated with the investment.",
          example: "A2:A25",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "financing_rate",
          detail: "The interest rate paid on funds invested.",
          example: "0.1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "reinvestment_return_rate",
          detail:
            "The return (as a percentage) earned on reinvestment of income received from the investment.",
          example: "0.12",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "IRR",
      t: 8,
      d: "Calculates the internal rate of return on an investment based on a series of periodic cash flows.",
      a: "Internal rate of return given periodic cashflows.",
      m: [1, 2],
      p: [
        {
          name: "cashflow_amounts",
          detail:
            "An array or range containing the income or payments associated with the investment.",
          example: "A2:A25",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "rate_guess",
          detail: "An estimate for what the internal rate of return will be.",
          example: "200",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "NPV",
      t: 8,
      d: "Calculates the net present value of an investment based on a series of periodic cash flows and a discount rate.",
      a: "The net present value of an investment based on a series of periodic cash flows and a discount rate.",
      m: [2, 255],
      p: [
        {
          name: "discount",
          detail: "The discount rate of the investment over one period.",
          example: "0.1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "cashflow1",
          detail: "The first future cash flow.",
          example: "200",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "cashflow2",
          detail: "Additional future cash flows.",
          example: "250",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "XNPV",
      t: 8,
      d: "Calculates the net present value of an investment based on a specified series of potentially irregularly spaced cash flows and a discount rate.",
      a: "Net present value given non-periodic cashflows.",
      m: [3, 3],
      p: [
        {
          name: "discount",
          detail: "The discount rate of the investment over one period.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "cashflow_amounts",
          detail:
            "A range of cells containing the income or payments associated with the investment.",
          example: "B2:B25",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "cashflow_dates",
          detail:
            "A range of cells with dates corresponding to the cash flows in `cashflow_amounts`.",
          example: "C2:C25",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "CUMIPMT",
      t: 8,
      d: "Calculates the cumulative interest over a range of payment periods for an investment based on constant-amount periodic payments and a constant interest rate.",
      a: "Cumulative interest paid over a set of periods.",
      m: [6, 6],
      p: [
        {
          name: "rate",
          detail: "The interest rate.",
          example: "0.12",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "number_of_periods",
          detail: "The number of payments to be made.",
          example: "12",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "present_value",
          detail: "The current value of the annuity.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "first_period",
          detail:
            "The number of the payment period to begin the cumulative calculation.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "last_period",
          detail:
            "The number of the payment period to end the cumulative calculation.",
          example: "5",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "end_or_beginning",
          detail:
            "Whether payments are due at the end (`0`) or beginning (`1`) of each period.",
          example: "0",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "PMT",
      t: 8,
      d: "Calculates the periodic payment for an annuity investment based on constant-amount periodic payments and a constant interest rate.",
      a: "Periodic payment for an annuity investment.",
      m: [3, 5],
      p: [
        {
          name: "rate",
          detail: "The interest rate.",
          example: "0.08",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "number_of_periods",
          detail: "The number of payments to be made.",
          example: "12",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "present_value",
          detail: "The current value of the annuity.",
          example: " 100000",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "future_value",
          detail:
            "The future value remaining after the final payment has been made.",
          example: "D2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "end_or_beginning",
          detail:
            "Whether payments are due at the end (`0`) or beginning (`1`) of each period.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "IPMT",
      t: 8,
      d: "Calculates the payment on interest for an investment based on constant-amount periodic payments and a constant interest rate.",
      a: "Payment on interest for an investment.",
      m: [4, 6],
      p: [
        {
          name: "rate",
          detail: "The interest rate.",
          example: "0.1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "period",
          detail: "The amortization period, in terms of number of periods.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "number_of_periods",
          detail: "The number of payments to be made.",
          example: "12",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "present_value",
          detail: "The current value of the annuity.",
          example: "80000",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "future_value",
          detail:
            "The future value remaining after the final payment has been made.",
          example: "E2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "end_or_beginning",
          detail:
            "Whether payments are due at the end (`0`) or beginning (`1`) of each period.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "PPMT",
      t: 8,
      d: "Calculates the payment on the principal of an investment based on constant-amount periodic payments and a constant interest rate.",
      a: "Payment on the principal of an investment.",
      m: [4, 6],
      p: [
        {
          name: "rate",
          detail: "The interest rate.",
          example: "0.1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "period",
          detail: "The amortization period, in terms of number of periods.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "number_of_periods",
          detail: "The number of payments to be made.",
          example: "3*12",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "present_value",
          detail: "The current value of the annuity.",
          example: "100000",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "future_value",
          detail:
            "The future value remaining after the final payment has been made.",
          example: "0",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "end_or_beginning",
          detail:
            "Whether payments are due at the end (`0`) or beginning (`1`) of each period.",
          example: "0",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "INTRATE",
      t: 8,
      d: "Calculates the effective interest rate generated when an investment is purchased at one price and sold at another with no interest or dividends generated by the investment itself.",
      a: "Calculates effective interest rate.",
      m: [4, 5],
      p: [
        {
          name: "buy_date",
          detail: "The date of purchase of the investment.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "sell_date",
          detail: "The date of sale of the investment.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "buy_price",
          detail: "The price at which the investment was purchased.",
          example: "100000",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "sell_price",
          detail: "The price at which the investment was sold.",
          example: "101200",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "12",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "PRICE",
      t: 8,
      d: "Calculates the price of a security paying periodic interest, such as a US Treasury Bond, based on expected yield.",
      a: "Price of a security paying periodic interest.",
      m: [6, 7],
      p: [
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail:
            "The maturity or end date of the security, when it can be redeemed at face, or par value.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "rate",
          detail: "The annualized rate of interest.",
          example: "0.057",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "yield",
          detail: "The expected annual yield of the security.",
          example: "0.065",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "redemption",
          detail: "The redemption amount per 100 face value, or par.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "frequency",
          detail:
            "The number of interest or coupon payments per year (1, 2, or 4).",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "0",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "PRICEDISC",
      t: 8,
      d: "Calculates the price of a discount (non-interest-bearing) security, based on expected yield.",
      a: "Price of a discount security.",
      m: [4, 5],
      p: [
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail:
            "The maturity or end date of the security, when it can be redeemed at face, or par value.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "discount",
          detail: "The discount rate of the security at time of purchase.",
          example: "0.0525",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "redemption",
          detail: "The redemption amount per 100 face value, or par.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "0",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "PRICEMAT",
      t: 8,
      d: "Calculates the price of a security paying interest at maturity, based on expected yield.",
      a: "Price of security paying interest at maturity.",
      m: [5, 6],
      p: [
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail:
            "The maturity or end date of the security, when it can be redeemed at face, or par value.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "issue",
          detail: "The date the security was initially issued.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "rate",
          detail: "The annualized rate of interest.",
          example: "0.061",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "yield",
          detail: "The expected annual yield of the security.",
          example: "0.061",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "0",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "RECEIVED",
      t: 8,
      d: "Calculates the amount received at maturity for an investment in fixed-income securities purchased on a given date.",
      a: "Amount received at maturity for a security.",
      m: [4, 5],
      p: [
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail:
            "The maturity or end date of the security, when it can be redeemed at face, or par value.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "investment",
          detail:
            "The amount invested (irrespective of face value of each security).",
          example: "10000000",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "discount",
          detail: "The discount rate of the security invested in.",
          example: "0.0575",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "12",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DISC",
      t: 8,
      d: "Calculates the discount rate of a security based on price.",
      a: "The discount rate of a security based on price.",
      m: [4, 5],
      p: [
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail:
            "The maturity or end date of the security, when it can be redeemed at face, or par value.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "price",
          detail:
            "The price at which the security is bought per 100 face value.",
          example: "97.975",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "redemption",
          detail: "The redemption amount per 100 face value, or par.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "12",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "NPER",
      t: 8,
      d: "Calculates the number of payment periods for an investment based on constant-amount periodic payments and a constant interest rate.",
      a: "Number of payment periods for an investment.",
      m: [3, 5],
      p: [
        {
          name: "rate",
          detail: "The interest rate.",
          example: "0.12",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "payment_amount",
          detail: "The amount of each payment made.",
          example: "500",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "present_value",
          detail: "The current value of the annuity.",
          example: "40000",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "future_value",
          detail:
            "The future value remaining after the final payment has been made.",
          example: "0",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "end_or_beginning",
          detail:
            "Whether payments are due at the end (`0`) or beginning (`1`) of each period.",
          example: "0",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SLN",
      t: 8,
      d: "Calculates the depreciation of an asset for one period using the straight-line method.",
      a: "Depreciation of asset using the straight-line method.",
      m: [3, 3],
      p: [
        {
          name: "cost",
          detail: "The initial cost of the asset.",
          example: "300000",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "salvage",
          detail: "The value of the asset at the end of depreciation.",
          example: "75000",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "life",
          detail: "The number of periods over which the asset is depreciated.",
          example: "10",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DURATION",
      t: 8,
      d: "Calculates the number of compounding periods required for an investment of a specified present value appreciating at a given rate to reach a target value.",
      a: "Number of periods for an investment to reach a value.",
      m: [5, 6],
      p: [
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail:
            "The maturity or end date of the security, when it can be redeemed at face, or par value.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "rate",
          detail: "The annualized rate of interest.",
          example: "0.08",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "yield",
          detail: "The expected annual yield of the security.",
          example: "0.09",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "frequency",
          detail:
            "The number of interest or coupon payments per year (1, 2, or 4).",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "0",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "MDURATION",
      t: 8,
      d: "Calculates the modified Macaulay duration of a security paying periodic interest, such as a US Treasury Bond, based on expected yield.",
      a: "Modified Macaulay duration.",
      m: [5, 6],
      p: [
        {
          name: "settlement",
          detail:
            "The settlement date of the security, the date after issuance when the security is delivered to the buyer.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "maturity",
          detail:
            "The maturity or end date of the security, when it can be redeemed at face, or par value.",
          example: "DATE(2010",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "rate",
          detail: "The annualized rate of interest.",
          example: "0.08",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "yield",
          detail: "The expected annual yield of the security.",
          example: "0.09",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "frequency",
          detail:
            "The number of interest or coupon payments per year (1, 2, or 4).",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "day_count_convention",
          detail: "An indicator of what day count method to use.",
          example: "0",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "BIN2DEC",
      t: 9,
      d: "Converts a signed binary number to decimal format.",
      a: "Converts a signed binary number to decimal format.",
      m: [1, 1],
      p: [
        {
          name: "signed_binary_number",
          detail:
            "The signed 10-bit binary value to be converted to decimal, provided as a string.",
          example: "101",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "BIN2HEX",
      t: 9,
      d: "Converts a signed binary number to signed hexadecimal format.",
      a: "Converts a binary number to hexadecimal.",
      m: [1, 2],
      p: [
        {
          name: "signed_binary_number",
          detail:
            "The signed 10-bit binary value to be converted to signed hexademical, provided as a string.",
          example: "101",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "significant_digits",
          detail: "The number of significant digits to ensure in the result.",
          example: "8",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "BIN2OCT",
      t: 9,
      d: "Converts a signed binary number to signed octal format.",
      a: "Converts a binary number to octal.",
      m: [1, 2],
      p: [
        {
          name: "signed_binary_number",
          detail:
            "The signed 10-bit binary value to be converted to signed octal, provided as a string.",
          example: "101",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "significant_digits",
          detail: "The number of significant digits to ensure in the result.",
          example: "8",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DEC2BIN",
      t: 9,
      d: "Converts a decimal number to signed binary format.",
      a: "Converts a decimal number to signed binary format.",
      m: [1, 2],
      p: [
        {
          name: "decimal_number",
          detail:
            "The decimal value to be converted to signed binary, provided as a string.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "significant_digits",
          detail: "The number of significant digits to ensure in the result.",
          example: "8",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DEC2HEX",
      t: 9,
      d: "Converts a decimal number to signed hexadecimal format.",
      a: "Converts a decimal number to hexadecimal.",
      m: [1, 2],
      p: [
        {
          name: "decimal_number",
          detail:
            "The decimal value to be converted to signed hexadecimal, provided as a string.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "significant_digits",
          detail: "The number of significant digits to ensure in the result.",
          example: "8",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DEC2OCT",
      t: 9,
      d: "Converts a decimal number to signed octal format.",
      a: "Converts a decimal number to signed octal format.",
      m: [1, 2],
      p: [
        {
          name: "decimal_number",
          detail:
            "The decimal value to be converted to signed octal, provided as a string.",
          example: "100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "significant_digits",
          detail: "The number of significant digits to ensure in the result.",
          example: "8",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "HEX2BIN",
      t: 9,
      d: "Converts a signed hexadecimal number to signed binary format.",
      a: "Converts a hexadecimal number to binary.",
      m: [1, 2],
      p: [
        {
          name: "signed_hexadecimal_number",
          detail:
            "The signed 40-bit hexadecimal value to be converted to signed binary, provided as a string.",
          example: '"f3"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "significant_digits",
          detail: "The number of significant digits to ensure in the result.",
          example: "8",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "HEX2DEC",
      t: 9,
      d: "Converts a signed hexadecimal number to decimal format.",
      a: "Converts a hexadecimal number to decimal.",
      m: [1, 1],
      p: [
        {
          name: "signed_hexadecimal_number",
          detail:
            "The signed 40-bit hexadecimal value to be converted to decimal, provided as a string.",
          example: '"f3"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "HEX2OCT",
      t: 9,
      d: "Converts a signed hexadecimal number to signed octal format.",
      a: "Converts a hexadecimal number to octal.",
      m: [1, 2],
      p: [
        {
          name: "signed_hexadecimal_number",
          detail:
            "The signed 40-bit hexadecimal value to be converted to signed octal, provided as a string.",
          example: '"f3"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "significant_digits",
          detail: "The number of significant digits to ensure in the result.",
          example: "8",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "OCT2BIN",
      t: 9,
      d: "Converts a signed octal number to signed binary format.",
      a: "Converts an octal number to binary.",
      m: [1, 2],
      p: [
        {
          name: "signed_octal_number",
          detail:
            "The signed 30-bit octal value to be converted to signed binary, provided as a string.",
          example: "37",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "significant_digits",
          detail: "The number of significant digits to ensure in the result.",
          example: "8",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "OCT2DEC",
      t: 9,
      d: "Converts a signed octal number to decimal format.",
      a: "Converts a signed octal number to decimal format.",
      m: [1, 1],
      p: [
        {
          name: "signed_octal_number",
          detail:
            "The signed 30-bit octal value to be converted to decimal, provided as a string.",
          example: "37",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "OCT2HEX",
      t: 9,
      d: "Converts a signed octal number to signed hexadecimal format.",
      a: "Converts an octal number to hexadecimal.",
      m: [1, 2],
      p: [
        {
          name: "signed_octal_number",
          detail:
            "The signed 30-bit octal value to be converted to signed hexadecimal, provided as a string.",
          example: "37",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "significant_digits",
          detail: "The number of significant digits to ensure in the result.",
          example: "8",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "COMPLEX",
      t: 9,
      d: "Creates a complex number given real and imaginary coefficients.",
      a: "Creates a complex number.",
      m: [2, 3],
      p: [
        {
          name: "real_part",
          detail: "The real coefficient.",
          example: "3",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "imaginary_part",
          detail: "The imaginary coefficient.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "suffix",
          detail:
            "The suffix for the imaginary coefficient, can only be 'i' or 'j'. If omitted, 'i' will be used.",
          example: '"j"',
          require: "o",
          repeat: "n",
          type: "rangestring",
        },
      ],
    },
    {
      n: "IMREAL",
      t: 9,
      d: "Returns the real coefficient of a complex number.",
      a: "The real coefficient of a complex number.",
      m: [1, 1],
      p: [
        {
          name: "complex_number",
          detail: "The complex number, in the a+bi or a+bj format.",
          example: '"4+5i"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "IMAGINARY",
      t: 9,
      d: "Returns the imaginary coefficient of a complex number.",
      a: "The imaginary coefficient of a complex number.",
      m: [1, 1],
      p: [
        {
          name: "complex_number",
          detail: "The complex number, in the a+bi or a+bj format.",
          example: '"4+5i"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "IMCONJUGATE",
      t: 9,
      d: "Returns the complex conjugate of a number.",
      a: "The complex conjugate of a number.",
      m: [1, 1],
      p: [
        {
          name: "number",
          detail: "The complex number to calculate the conjugate for.",
          example: '"3+4i"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "IMABS",
      t: 9,
      d: "Returns absolute value (or modulus) of a complex number.",
      a: "The absolute value of a complex number.",
      m: [1, 1],
      p: [
        {
          name: "number",
          detail: "The complex number to calculate the absolute value of.",
          example: '"3+4i"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "DELTA",
      t: 9,
      d: "Compare two numeric values, returning 1 if they're equal.",
      a: "Compare two numeric values.",
      m: [1, 2],
      p: [
        {
          name: "number1",
          detail: "The first number to compare.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "number2",
          detail: "The second number to compare.",
          example: "1",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "IMSUM",
      t: 9,
      d: "Returns the sum of a series of complex numbers.",
      a: "Sum of a series of complex numbers.",
      m: [1, 255],
      p: [
        {
          name: "value1",
          detail: "The first complex number or range to add together.",
          example: '"3+4i"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail: "Additional complex numbers or ranges to add to `value1`.",
          example: '"5-3i"',
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "IMSUB",
      t: 9,
      d: "Returns the difference between two complex numbers.",
      a: "The difference between two complex numbers.",
      m: [2, 2],
      p: [
        {
          name: "first_number",
          detail: "The complex number to subtract second_number from.",
          example: '"6+5i"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "second_number",
          detail: "The complex number to subtract from first_number.",
          example: '"2+3i"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "IMPRODUCT",
      t: 9,
      d: "Returns the result of multiplying a series of complex numbers together.",
      a: "Result of multiplying a series of complex numbers together.",
      m: [1, 255],
      p: [
        {
          name: "factor1",
          detail: "The first number or range to calculate for the product.",
          example: '"3+4i"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "factor2",
          detail:
            "Additional complex numbers or ranges to calculate for the product.",
          example: '"5-3i"',
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "IMDIV",
      t: 9,
      d: "Returns one complex number divided by another.",
      a: "One complex number divided by another.",
      m: [2, 2],
      p: [
        {
          name: "dividend",
          detail: "The complex number to be divided.",
          example: '"11+16i"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "divisor",
          detail: "The complex number to divide by.",
          example: '"3+2i"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "NOT",
      t: 10,
      d: "Returns the opposite of a logical value - `NOT(TRUE)` returns `FALSE`; `NOT(FALSE)` returns `TRUE`.",
      a: "Returns opposite of provided logical value.",
      m: [1, 1],
      p: [
        {
          name: "logical_expression",
          detail:
            "An expression or reference to a cell holding an expression that represents some logical value.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "TRUE",
      t: 10,
      d: "Returns the logical value `TRUE`.",
      a: "Logical value `true`.",
      m: [0, 0],
      p: [],
    },
    {
      n: "FALSE",
      t: 10,
      d: "Returns the logical value `FALSE`.",
      a: "Logical value `false`.",
      m: [0, 0],
      p: [],
    },
    {
      n: "AND",
      t: 10,
      d: "Returns true if all of the provided arguments are logically true, and false if any of the provided arguments are logically false.",
      a: "Logical `and` operator.",
      m: [1, 255],
      p: [
        {
          name: "logical_expression1",
          detail:
            "An expression or reference to a cell containing an expression that represents some logical value, i.e. `TRUE` or `FALSE`, or an expression that can be coerced to a logical value.",
          example: 'A2 = "foo"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "logical_expression2",
          detail: "More expressions that represent logical values.",
          example: 'A3 = "bar"',
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "IFERROR",
      t: 10,
      d: "Returns the first argument if it is not an error value, otherwise returns the second argument if present, or a blank if the second argument is absent.",
      a: "Value if it is not an error, otherwise 2nd argument.",
      m: [2, 2],
      p: [
        {
          name: "value",
          detail: "The value to return if `value` itself is not an error.",
          example: "A1",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value_if_error",
          detail: "The value the function returns if `value` is an error.",
          example: '"Error in cell A1"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "IF",
      t: 10,
      d: "Returns one value if a logical expression is `TRUE` and another if it is `FALSE`.",
      a: "Returns value depending on logical expression.",
      m: [2, 3],
      p: [
        {
          name: "logical_expression",
          detail:
            "An expression or reference to a cell containing an expression that represents some logical value, i.e. `TRUE` or `FALSE`.",
          example: 'A2 = "foo"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value_if_true",
          detail:
            "The value the function returns if `logical_expression` is `TRUE`.",
          example: '"A2 is foo"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value_if_false",
          detail:
            "The value the function returns if `logical_expression` is `FALSE`.",
          example: '"A2 was false"',
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "OR",
      t: 10,
      d: "Returns true if any of the provided arguments are logically true, and false if all of the provided arguments are logically false.",
      a: "Logical `or` operator.",
      m: [1, 255],
      p: [
        {
          name: "logical_expression1",
          detail:
            "An expression or reference to a cell containing an expression that represents some logical value, i.e. `TRUE` or `FALSE`, or an expression that can be coerced to a logical value.",
          example: 'A2 = "foo"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "logical_expression2",
          detail: "More expressions that evaluate to logical values.",
          example: ' A3 = "bar"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "NE",
      t: 11,
      d: "Returns `TRUE` if two specified values are not equal and `FALSE` otherwise. Equivalent to the `!=` operator.",
      a: "Not equal.",
      m: [2, 2],
      p: [
        {
          name: "value1",
          detail: "The first value.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail: "The value to test against `value1` for inequality.",
          example: "A3",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "EQ",
      t: 11,
      d: "Returns `TRUE` if two specified values are equal and `FALSE` otherwise. Equivalent to the `==` operator.",
      a: "Equal.",
      m: [2, 2],
      p: [
        {
          name: "value1",
          detail: "The first value.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail: "The value to test against `value1` for equality.",
          example: "A3",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "GT",
      t: 11,
      d: "Returns `TRUE` if the first argument is strictly greater than the second, and `FALSE` otherwise. Equivalent to the `>` operator.",
      a: "Strictly greater than.",
      m: [2, 2],
      p: [
        {
          name: "value1",
          detail: "The value to test as being greater than `value2`.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail: "The second value.",
          example: "A3",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "GTE",
      t: 11,
      d: "Returns `TRUE` if the first argument is greater than or equal to the second, and `FALSE` otherwise. Equivalent to the `>=` operator.",
      a: "Greater than or equal to.",
      m: [2, 2],
      p: [
        {
          name: "value1",
          detail:
            "The value to test as being greater than or equal to `value2`.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail: "The second value.",
          example: "A3",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "LT",
      t: 11,
      d: "Returns `TRUE` if the first argument is strictly less than the second, and `FALSE` otherwise. Equivalent to the `<` operator.",
      a: "Less than.",
      m: [2, 2],
      p: [
        {
          name: "value1",
          detail: "The value to test as being less than `value2`.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail: "The second value.",
          example: "A3",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "LTE",
      t: 11,
      d: "Returns `TRUE` if the first argument is less than or equal to the second, and `FALSE` otherwise. Equivalent to the `<=` operator.",
      a: "Less than or equal to.",
      m: [2, 2],
      p: [
        {
          name: "value1",
          detail: "The value to test as being less than or equal to `value2`.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail: "The second value.",
          example: "A3",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "ADD",
      t: 11,
      d: "Returns the sum of two numbers. Equivalent to the `+` operator.",
      a: "Sum of two numbers",
      m: [2, 2],
      p: [
        {
          name: "value1",
          detail: "The first addend.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value2",
          detail: "The second addend.",
          example: "A3",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "MINUS",
      t: 11,
      d: "Returns the difference of two numbers. Equivalent to the `-` operator.",
      a: "Difference of two numbers",
      m: [2, 2],
      p: [
        {
          name: "value1",
          detail: "The minuend, or number to be subtracted from.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "value2",
          detail: "The subtrahend, or number to subtract from `value1`.",
          example: "A3",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "MULTIPLY",
      t: 11,
      d: "Returns the product of two numbers. Equivalent to the `*` operator.",
      a: "Product of two numbers",
      m: [2, 2],
      p: [
        {
          name: "factor1",
          detail: "The first multiplicand.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "factor2",
          detail: "The second multiplicand.",
          example: "B2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DIVIDE",
      t: 11,
      d: "Returns one number divided by another. Equivalent to the `/` operator.",
      a: "One number divided by another",
      m: [2, 2],
      p: [
        {
          name: "dividend",
          detail: "The number to be divided.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "divisor",
          detail: "The number to divide by.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "CONCAT",
      t: 11,
      d: "Returns the concatenation of two values. Equivalent to the `&` operator.",
      a: "Concatenation of two values",
      m: [2, 2],
      p: [
        {
          name: "value1",
          detail: "The value to which `value2` will be appended.",
          example: '"de"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value2",
          detail: "The value to append to `value1`.",
          example: '"mystify"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "UNARY_PERCENT",
      t: 11,
      d: "Returns a value interpreted as a percentage; that is, `UNARY_PERCENT(100)` equals `1`.",
      a: "Value interpreted as a percentage.",
      m: [1, 1],
      p: [
        {
          name: "percentage",
          detail: "The value to interpret as a percentage.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "CONCATENATE",
      t: 12,
      d: "Appends strings to one another.",
      a: "Appends strings to one another.",
      m: [1, 255],
      p: [
        {
          name: "string1",
          detail: "The initial string.",
          example: '"Super"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "string2",
          detail: "More strings to append in sequence.",
          example: '"calla"',
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "CODE",
      t: 12,
      d: "Returns the numeric Unicode map value of the first character in the string provided.",
      a: "Numeric unicode map value of character.",
      m: [1, 1],
      p: [
        {
          name: "string",
          detail:
            "The string whose first character's Unicode map value will be returned.",
          example: '"a"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "CHAR",
      t: 12,
      d: "Convert a number into a character according to the current Unicode table.",
      a: "Gets character associated with number.",
      m: [1, 1],
      p: [
        {
          name: "table_number",
          detail:
            "The number of the character to look up from the current Unicode table in decimal format.",
          example: "97",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "ARABIC",
      t: 12,
      d: "Computes the value of a Roman numeral.",
      a: "Computes the value of a roman numeral.",
      m: [1, 1],
      p: [
        {
          name: "roman_numeral",
          detail:
            "The Roman numeral to format, whose value must be between 1 and 3999, inclusive.",
          example: '"XIV"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "ROMAN",
      t: 12,
      d: "Formats a number in Roman numerals.",
      a: "Formats a number in Roman numerals.",
      m: [1, 1],
      p: [
        {
          name: "number",
          detail: "The number to format, between 1 and 3999, inclusive.",
          example: "499",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "REGEXEXTRACT",
      t: 12,
      d: "Extracts matching substrings according to a regular expression.",
      a: "Extracts matching substrings with regular expression.",
      m: [2, 2],
      p: [
        {
          name: "text",
          detail: "The input text.",
          example: '"Needle in a haystack"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "regular_expression",
          detail:
            "The first part of `text` that matches this expression will be returned.",
          example: '".e{2}dle"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "REGEXMATCH",
      t: 12,
      d: "Whether a piece of text matches a regular expression.",
      a: "Whether a piece of text matches regular expression.",
      m: [2, 2],
      p: [
        {
          name: "text",
          detail: "The text to be tested against the regular expression.",
          example: '"Spreadsheets"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "regular_expression",
          detail: "The regular expression to test the text against.",
          example: '"S.r"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "REGEXREPLACE",
      t: 12,
      d: "Replaces part of a text string with a different text string using regular expressions.",
      a: "Replaces text with regular expressions.",
      m: [3, 3],
      p: [
        {
          name: "text",
          detail: "The text, a part of which will be replaced.",
          example: '"Spreadsheets"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "regular_expression",
          detail:
            "The regular expression.  All matching instances in `text` will be replaced.",
          example: '"S.*d"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "replacement",
          detail: "The text which will be inserted into the original text.",
          example: '"Bed"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "T",
      t: 12,
      d: "Returns string arguments as text, or the empty string if the value is not text.",
      a: "String arguments as text.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The argument to be converted to text.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "FIXED",
      t: 12,
      d: "Formats a number with a fixed number of decimal places.",
      a: "Formats number with fixed number of decimal places.",
      m: [1, 3],
      p: [
        {
          name: "number",
          detail: "The number to format.",
          example: "3.141592653",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "number_of_places",
          detail: "The number of decimal places to display in the result.",
          example: "2",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "suppress_separator",
          detail:
            "Whether or not to suppress the thousands separator used in some locales (e.g. `1,000` becomes `1000`). Separators will be present if this value is 0 or omitted, and absent otherwise.",
          example: "FALSE()",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "FIND",
      t: 12,
      d: "Returns the position at which a string is first found within text where the capitalization of letters matters. Returns `#VALUE!` if the string is not found.",
      a: "First position of string found in text, case-sensitive.",
      m: [2, 3],
      p: [
        {
          name: "search_for",
          detail: "The string to look for within `text_to_search`.",
          example: '"n"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "text_to_search",
          detail:
            "The text to search for the first occurrence of `search_for`.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "starting_at",
          detail:
            "The character within `text_to_search` at which to start the search.",
          example: "14",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "FINDB",
      t: 12,
      d: "Returns the position at which a string is first found within text counting each double-character as 2.",
      a: "Position at which a string is first found within text (binary).",
      m: [2, 3],
      p: [
        {
          name: "search_for",
          detail: "The string to look for within `text_to_search`.",
          example: '"new"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "text_to_search",
          detail:
            "The text to search for the first occurrence of `search_for`.",
          example: '"new year"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "starting_at",
          detail:
            "The character within `text_to_search` at which to start the search.",
          example: "2",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "JOIN",
      t: 12,
      d: "Concatenates the elements of one or more one-dimensional arrays using a specified delimiter.",
      a: "Concatenates elements of arrays with delimiter.",
      m: [2, 255],
      p: [
        {
          name: "delimiter",
          detail:
            "The character or string to place between each concatenated value.",
          example: '" and-a "',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value_or_array1",
          detail: "The value or values to be appended using `delimiter`.",
          example: "{1",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "value_or_array2",
          detail: "More values to be appended using `delimiter`.",
          example: "2",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "LEFT",
      t: 12,
      d: "Returns a substring from the beginning of a specified string.",
      a: "Substring from beginning of specified string.",
      m: [1, 2],
      p: [
        {
          name: "string",
          detail: "The string from which the left portion will be returned.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "number_of_characters",
          detail:
            "The number of characters to return from the left side of `string`.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "RIGHT",
      t: 12,
      d: "Returns a substring from the end of a specified string.",
      a: "A substring from the end of a specified string.",
      m: [1, 2],
      p: [
        {
          name: "string",
          detail: "The string from which the right portion will be returned.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "number_of_characters",
          detail:
            "The number of characters to return from the right side of `string`.",
          example: "2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "MID",
      t: 12,
      d: "Returns a segment of a string.",
      a: "A segment of a string.",
      m: [3, 3],
      p: [
        {
          name: "string",
          detail: "The string to extract a segment from.",
          example: '"get this"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "starting_at",
          detail:
            "The index from the left of `string` from which to begin extracting. The first character in `string` has the index 1.",
          example: "5",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "extract_length",
          detail: "The length of the segment to extract.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "LEN",
      t: 12,
      d: "Returns the length of a string.",
      a: "Length of a string.",
      m: [1, 1],
      p: [
        {
          name: "text",
          detail: "The string whose length will be returned.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "LENB",
      t: 12,
      d: "Returns the length of a string in bytes.",
      a: "Length of a string in bytes.",
      m: [1, 1],
      p: [
        {
          name: "text",
          detail: "The string whose length will be returned.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "LOWER",
      t: 12,
      d: "Converts a specified string to lowercase.",
      a: "Converts a specified string to lowercase.",
      m: [1, 1],
      p: [
        {
          name: "text",
          detail: "The string to convert to lowercase.",
          example: '"LOREM IPSUM"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "UPPER",
      t: 12,
      d: "Converts a specified string to uppercase.",
      a: "Converts a specified string to uppercase.",
      m: [1, 1],
      p: [
        {
          name: "text",
          detail: "The string to convert to uppercase.",
          example: '"lorem ipsum"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "EXACT",
      t: 12,
      d: "Tests whether two strings are identical.",
      a: "Tests whether two strings are identical.",
      m: [2, 2],
      p: [
        {
          name: "string1",
          detail: "The first string to compare",
          example: "A1",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "string2",
          detail: "The second string to compare",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "REPLACE",
      t: 12,
      d: "Replaces part of a text string with a different text string.",
      a: "Replaces part of a text string with different text.",
      m: [4, 4],
      p: [
        {
          name: "text",
          detail: "The text, a part of which will be replaced.",
          example: '"Spreadsheets"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "position",
          detail:
            "The position where the replacement will begin (starting from 1).",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "length",
          detail: "The number of characters in the text to be replaced.",
          example: "6",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "new_text",
          detail: "The text which will be inserted into the original text.",
          example: '"Bed"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "REPT",
      t: 12,
      d: "Returns specified text repeated a number of times.",
      a: "Specified text repeated a number of times.",
      m: [2, 2],
      p: [
        {
          name: "text_to_repeat",
          detail: "The character or string to repeat.",
          example: '"ha"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "number_of_repetitions",
          detail:
            "The number of times `text_to_repeat` should appear in the value returned.",
          example: "4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SEARCH",
      t: 12,
      d: "Returns the position at which a string is first found within text and ignores capitalization of letters. Returns `#VALUE!` if the string is not found.",
      a: "First position of string found in text, ignoring case.",
      m: [2, 3],
      p: [
        {
          name: "search_for",
          detail: "The string to look for within `text_to_search`.",
          example: '"n"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "text_to_search",
          detail:
            "The text to search for the first occurrence of `search_for`.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "starting_at",
          detail:
            "The character within `text_to_search` at which to start the search.",
          example: "14",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SUBSTITUTE",
      t: 12,
      d: "Replaces existing text with new text in a string.",
      a: "Replaces existing text with new text in a string.",
      m: [3, 4],
      p: [
        {
          name: "text_to_search",
          detail: "The text within which to search and replace.",
          example: '"search for it"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "search_for",
          detail: "The string to search for within `text_to_search`.",
          example: '"search for"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "replace_with",
          detail: "The string that will replace `search_for`.",
          example: '"Google"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "occurrence_number",
          detail:
            "The instance of `search_for` within `text_to_search` to replace with `replace_with`. By default, all occurrences of `search_for` are replaced; however, if `occurrence_number` is specified, only the indicated instance of `search_for` is replaced.",
          example: "3",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "CLEAN",
      t: 12,
      d: "Returns the text with the non-printable ASCII characters removed.",
      a: "Removes non-printable characters from a piece of text.",
      m: [1, 1],
      p: [
        {
          name: "text",
          detail: "The text whose non-printable characters are to be removed.",
          example: '"AF"&CHAR(31)',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "TEXT",
      t: 12,
      d: "Converts a number into text according to a specified format.",
      a: "Formats a number into text.",
      m: [2, 2],
      p: [
        {
          name: "number",
          detail: "The number, date, or time to format.",
          example: "1.23",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "format",
          detail:
            "The pattern by which to format the number, enclosed in quotation marks.",
          example: '"$0.00"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "TRIM",
      t: 12,
      d: "Removes leading, trailing, and repeated spaces in text.",
      a: "Removes space characters.",
      m: [1, 1],
      p: [
        {
          name: "text",
          detail:
            "The text or reference to a cell containing text to be trimmed.",
          example: '" lorem ipsum"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "VALUE",
      t: 12,
      d: "Converts a string in any of the date, time or number formats that Google Sheets understands into a number.",
      a: "Converts a date/time/number string into a number.",
      m: [1, 1],
      p: [
        {
          name: "text",
          detail: "The string containing the value to be converted.",
          example: '"123"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "PROPER",
      t: 12,
      d: "Capitalizes each word in a specified string.",
      a: "Capitalizes each word in a specified string.",
      m: [1, 1],
      p: [
        {
          name: "text_to_capitalize",
          detail:
            "The text which will be returned with the first letter of each word in uppercase and all other letters in lowercase.",
          example: '"united states"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "CONVERT",
      t: 13,
      d: "Converts a numeric value to a different unit of measure.",
      a: "Unit conversion for numbers.",
      m: [3, 3],
      p: [
        {
          name: "value",
          detail: "The numeric value in `start_unit` to convert to `end_unit`.",
          example: "5.1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "start_unit",
          detail: "The starting unit, the unit currently assigned to `value`.",
          example: '"g"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "end_unit",
          detail:
            "The unit of measure into which to convert the argument, `value`.",
          example: '"kg"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "SUMX2MY2",
      t: 14,
      d: "Calculates the sum of the differences of the squares of values in two arrays.",
      a: "Sum of the differences of squares.",
      m: [2, 2],
      p: [
        {
          name: "array_x",
          detail:
            "The array or range of values whose squares will be reduced by the squares of corresponding entries in `array_y` and added together.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "array_y",
          detail:
            "The array or range of values whose squares will be subtracted from the squares of corresponding entries in `array_x` and added together.",
          example: "B2:B100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SUMX2PY2",
      t: 14,
      d: "Calculates the sum of the sums of the squares of values in two arrays.",
      a: "Sum of the sums of squares.",
      m: [2, 2],
      p: [
        {
          name: "array_x",
          detail:
            "The array or range of values whose squares will be added to the squares of corresponding entries in `array_y` and added together.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "array_y",
          detail:
            "The array or range of values whose squares will be added to the squares of corresponding entries in `array_x` and added together.",
          example: "B2:B100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SUMXMY2",
      t: 14,
      d: "Calculates the sum of the squares of differences of values in two arrays.",
      a: "Sum of the squares of differences.",
      m: [2, 2],
      p: [
        {
          name: "array_x",
          detail:
            "The array or range of values that will be reduced by corresponding entries in `array_y`, squared, and added together.",
          example: "A2:A100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "array_y",
          detail:
            "The array or range of values that will be subtracted from corresponding entries in `array_x`, the result squared, and all such results added together.",
          example: "B2:B100",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "TRANSPOSE",
      t: 14,
      d: "Transposes the rows and columns of an array or range of cells.",
      a: "Transposes the rows and columns of an array.",
      m: [1, 1],
      p: [
        {
          name: "array_or_range",
          detail: "The array or range whose rows and columns will be swapped.",
          example: "{1,2}",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "TREND",
      t: 14,
      d: "Given partial data about a linear trend, fits an ideal linear trend using the least squares method and/or predicts further values.",
      a: "Fits points to linear trend derived via least-squares.",
      m: [1, 4],
      p: [
        {
          name: "known_data_y",
          detail:
            "The array or range containing dependent (y) values that are already known, used to curve fit an ideal linear trend.",
          example: "B2:B10",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "known_data_x",
          detail:
            "The values of the independent variable(s) corresponding with `known_data_y`.",
          example: "A2:A10",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "new_data_x",
          detail:
            "The data points to return the `y` values for on the ideal curve fit.",
          example: "A11:A13",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "b",
          detail:
            "Given a general linear form of `y = m*x+b` for a curve fit, calculates `b` if `TRUE` or forces `b` to be `0` and only calculates the `m` values if `FALSE`, i.e. forces the curve fit to pass through the origin.",
          example: "TRUE()",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "FREQUENCY",
      t: 14,
      d: "Calculates the frequency distribution of a one-column array into specified classes.",
      a: "The frequency distribution of array.",
      m: [2, 2],
      p: [
        {
          name: "data",
          detail: "The array or range containing the values to be counted.",
          example: "A2:A40",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "classes",
          detail: "The array or range containing the set of classes.",
          example: "B2:B5",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "GROWTH",
      t: 14,
      d: "Given partial data about an exponential growth trend, fits an ideal exponential growth trend and/or predicts further values.",
      a: "Fits points to exponential growth trend.",
      m: [1, 4],
      p: [
        {
          name: "known_data_y",
          detail:
            "The array or range containing dependent (y) values that are already known, used to curve fit an ideal exponential growth curve.",
          example: "B2:B10",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "known_data_x",
          detail:
            "The values of the independent variable(s) corresponding with `known_data_y`.",
          example: "A2:A10",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "new_data_x",
          detail:
            "The data points to return the `y` values for on the ideal curve fit.",
          example: "A11:A13",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "b",
          detail:
            "Given a general exponential form of `y = b*m^x` for a curve fit, calculates `b` if `TRUE` or forces `b` to be `1` and only calculates the `m` values if `FALSE`.",
          example: "TRUE()",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "LINEST",
      t: 14,
      d: "Given partial data about a linear trend, calculates various parameters about the ideal linear trend using the least-squares method.",
      a: "Best-fit linear trend via least-squares.",
      m: [1, 4],
      p: [
        {
          name: "known_data_y",
          detail:
            "The array or range containing dependent (y) values that are already known, used to curve fit an ideal linear trend.",
          example: "B2:B10",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "known_data_x",
          detail:
            "The values of the independent variable(s) corresponding with `known_data_y`.",
          example: "A2:A10",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "calculate_b",
          detail:
            "Given a linear form of `y = m*x+b`, calculates the y-intercept (`b`) if `TRUE`. Otherwise, forces `b` to be `0` and only calculates the `m` values if `FALSE`, i.e. forces the curve fit to pass through the origin.",
          example: "TRUE()",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "verbose",
          detail:
            "A flag specifying whether to return additional regression statistics or only the linear coefficients and the y-intercept (default).",
          example: "TRUE()",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "LOGEST",
      t: 14,
      d: "Given partial data about an exponential growth curve, calculates various parameters about the best fit ideal exponential growth curve.",
      a: "Best-fit exponential growth curve.",
      m: [1, 4],
      p: [
        {
          name: "known_data_y",
          detail:
            "The array or range containing dependent (y) values that are already known, used to curve fit an ideal exponential growth curve.",
          example: "B2:B10",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "known_data_x",
          detail:
            "The values of the independent variable(s) corresponding with `known_data_y`.",
          example: "A2:A10",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "b",
          detail:
            "Given a general exponential form of `y = b*m^x` for a curve fit, calculates `b` if `TRUE` or forces `b` to be `1` and only calculates the `m` values if `FALSE`.",
          example: "TRUE()",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "verbose",
          detail:
            "A flag specifying whether to return additional regression statistics or only the calculated coefficient and exponents.",
          example: "TRUE()",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "MDETERM",
      t: 14,
      d: "Returns the matrix determinant of a square matrix specified as an array or range.",
      a: "Matrix determinant of a square matrix.",
      m: [1, 1],
      p: [
        {
          name: "square_matrix",
          detail:
            "An array or range with an equal number of rows and columns representing a matrix whose determinant will be calculated.",
          example: "A1:D4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "MINVERSE",
      t: 14,
      d: "Returns the multiplicative inverse of a square matrix specified as an array or range.",
      a: "Multiplicative inverse of square matrix.",
      m: [1, 1],
      p: [
        {
          name: "square_matrix",
          detail:
            "An array or range with an equal number of rows and columns representing a matrix whose multiplicative inverse will be calculated.",
          example: "A1:D4",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "MMULT",
      t: 14,
      d: "Calculates the matrix product of two matrices specified as arrays or ranges.",
      a: "The matrix product of two matrices.",
      m: [2, 2],
      p: [
        {
          name: "matrix1",
          detail:
            "The first matrix in the matrix multiplication operation, represented as an array or range.",
          example: "A1:B3",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "matrix2",
          detail:
            "The second matrix in the matrix multiplication operation, represented as an array or range.",
          example: "C1:F2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SUMPRODUCT",
      t: 14,
      d: "Calculates the sum of the products of corresponding entries in two equal-sized arrays or ranges.",
      a: "Sum of products of elements in two arrays.",
      m: [1, 255],
      p: [
        {
          name: "array1",
          detail:
            "The first array or range whose entries will be multiplied with corresponding entries in the second such array or range.",
          example: "A2:C5",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "array2",
          detail:
            "The second array or range whose entries will be multiplied with corresponding entries in the first such array or range.",
          example: "D2:F5",
          require: "o",
          repeat: "y",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "ISFORMULA",
      t: 15,
      d: "Checks whether a value is a formula.",
      a: "Whether a value is a formula.",
      m: [1, 1],
      p: [
        {
          name: "cell",
          detail: "The cell to be verified as containing a formula.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "CELL",
      t: 15,
      d: "Returns the requested information about the specified cell.",
      a: "Gets information about a cell.",
      m: [2, 2],
      p: [
        {
          name: "info_type",
          detail:
            "The type of information requested (see article for available types)",
          example: '"type"',
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "reference",
          detail: "The reference to the cell.",
          example: "C2",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "NA",
      t: 15,
      d: 'Returns the "value not available" error, `#N/A`.',
      a: "The `#N/A` error.",
      m: [0, 0],
      p: [],
    },
    {
      n: "ERROR_TYPE",
      t: 15,
      d: "Returns a number corresponding to the error value in a different cell.",
      a: "Error value of cell (as number).",
      m: [1, 1],
      p: [
        {
          name: "reference",
          detail:
            "The cell to find the error number for although you can also provide the error value directly.",
          example: "A3",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "ISBLANK",
      t: 15,
      d: "Checks whether the referenced cell is empty.",
      a: "Whether the referenced cell is empty.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "Reference to the cell that will be checked for emptiness.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "ISERR",
      t: 15,
      d: "Checks whether a value is an error other than `#N/A`.",
      a: "Whether a value is an error other than `#n/a`.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail:
            "The value to be verified as an error type other than `#N/A`.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "ISERROR",
      t: 15,
      d: "Checks whether a value is an error.",
      a: "Whether a value is an error.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The value to be verified as an error type.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "ISLOGICAL",
      t: 15,
      d: "Checks whether a value is `TRUE` or `FALSE`.",
      a: "Whether a value is `true` or `false`.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The value to be verified as a logical `TRUE` or `FALSE`.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "ISNA",
      t: 15,
      d: "Checks whether a value is the error `#N/A`.",
      a: "Whether a value is the error `#n/a`.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The value to be compared with the error value `#N/A`.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "ISNONTEXT",
      t: 15,
      d: "Checks whether a value is non-textual.",
      a: "Whether a value is non-textual.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The value to be checked.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "ISNUMBER",
      t: 15,
      d: "Checks whether a value is a number.",
      a: "Whether a value is a number.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The value to be verified as a number.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "ISREF",
      t: 15,
      d: "Checks whether a value is a valid cell reference.",
      a: "Whether a value is a valid cell reference.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The value to be verified as a cell reference.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "ISTEXT",
      t: 15,
      d: "Checks whether a value is text.",
      a: "Whether a value is text.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The value to be verified as text.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "TYPE",
      t: 15,
      d: "Returns a number associated with the type of data passed into the function.",
      a: "Get the type of a value.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The value whose type is to be determined.",
          example: "C4",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "N",
      t: 15,
      d: "Returns the argument provided as a number. Text is converted to 0 and errors are returned as-is.",
      a: "Argument provided as a number.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail: "The argument to be converted to a number.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "TO_DATE",
      t: 16,
      d: "Converts a provided number to a date.",
      a: "Converts a provided number to a date.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail:
            "The argument or reference to a cell to be converted to a date.",
          example: "25405",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "TO_PURE_NUMBER",
      t: 16,
      d: "Converts a provided date/time, percentage, currency or other formatted numeric value to a pure number without formatting.",
      a: "Converts any numeric value to a pure number.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail:
            "The argument or reference to a cell to be converted to a pure number.",
          example: "50%",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "TO_TEXT",
      t: 16,
      d: "Converts a provided numeric value to a text value.",
      a: "Converts a provided numeric value to a text value.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail:
            "The argument or reference to a cell to be converted to text.",
          example: "24",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "TO_DOLLARS",
      t: 16,
      d: "Converts a provided number to a dollar value.",
      a: "Converts a provided number to a dollar value.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail:
            "The argument or reference to a cell to be converted to a dollar value.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "TO_PERCENT",
      t: 16,
      d: "Converts a provided number to a percentage.",
      a: "Converts a provided number to a percentage.",
      m: [1, 1],
      p: [
        {
          name: "value",
          detail:
            "The argument or reference to a cell to be converted to a percentage.",
          example: "A2",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DGET",
      t: 17,
      d: "Returns a single value from a database table-like array or range using a SQL-like query.",
      a: "Single value from a table-like range.",
      m: [3, 3],
      p: [
        {
          name: "database",
          detail:
            "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values.",
          example: "A2:F20",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "field",
          detail:
            "Indicates which column in `database` contains the values to be extracted and operated on.",
          example: "G2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "criteria",
          detail:
            "An array or range containing zero or more criteria to filter the `database` values by before operating.",
          example: "A22:D23",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "DMAX",
      t: 17,
      d: "Returns the maximum value selected from a database table-like array or range using a SQL-like query.",
      a: "Maximum of values from a table-like range.",
      m: [3, 3],
      p: [
        {
          name: "database",
          detail:
            "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values.",
          example: "A2:F20",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "field",
          detail:
            "Indicates which column in `database` contains the values to be extracted and operated on.",
          example: "G2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "criteria",
          detail:
            "An array or range containing zero or more criteria to filter the `database` values by before operating.",
          example: "A22:D23",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "DMIN",
      t: 17,
      d: "Returns the minimum value selected from a database table-like array or range using a SQL-like query.",
      a: "Minimum of values from a table-like range.",
      m: [3, 3],
      p: [
        {
          name: "database",
          detail:
            "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values.",
          example: "A2:F20",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "field",
          detail:
            "Indicates which column in `database` contains the values to be extracted and operated on.",
          example: "G2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "criteria",
          detail:
            "An array or range containing zero or more criteria to filter the `database` values by before operating.",
          example: "A22:D23",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "DAVERAGE",
      t: 17,
      d: "Returns the average of a set of values selected from a database table-like array or range using a SQL-like query.",
      a: "Average of a set of values from a table-like range.",
      m: [3, 3],
      p: [
        {
          name: "database",
          detail:
            "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values.",
          example: "A2:F20",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "field",
          detail:
            "Indicates which column in `database` contains the values to be extracted and operated on.",
          example: "G2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "criteria",
          detail:
            "An array or range containing zero or more criteria to filter the `database` values by before operating.",
          example: "A22:D23",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "DCOUNT",
      t: 17,
      d: "Counts numeric values selected from a database table-like array or range using a SQL-like query.",
      a: "Counts values from a table-like range.",
      m: [3, 3],
      p: [
        {
          name: "database",
          detail:
            "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values.",
          example: "A2:F20",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "field",
          detail:
            "Indicates which column in `database` contains the values to be extracted and operated on.",
          example: "G2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "criteria",
          detail:
            "An array or range containing zero or more criteria to filter the `database` values by before operating.",
          example: "A22:D23",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "DCOUNTA",
      t: 17,
      d: "Counts values, including text, selected from a database table-like array or range using a SQL-like query.",
      a: "Counts values and text from a table-like range.",
      m: [3, 3],
      p: [
        {
          name: "database",
          detail:
            "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values.",
          example: "A2:F20",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "field",
          detail:
            "Indicates which column in `database` contains the values to be extracted and operated on.",
          example: "G2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "criteria",
          detail:
            "An array or range containing zero or more criteria to filter the `database` values by before operating.",
          example: "A22:D23",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "DPRODUCT",
      t: 17,
      d: "Returns the product of values selected from a database table-like array or range using a SQL-like query.",
      a: "Product of values from a table-like range.",
      m: [3, 3],
      p: [
        {
          name: "database",
          detail:
            "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values.",
          example: "A2:F20",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "field",
          detail:
            "Indicates which column in `database` contains the values to be extracted and operated on.",
          example: "G2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "criteria",
          detail:
            "An array or range containing zero or more criteria to filter the `database` values by before operating.",
          example: "A22:D23",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "DSTDEV",
      t: 17,
      d: "Returns the standard deviation of a population sample selected from a database table-like array or range using a SQL-like query.",
      a: "Standard deviation of population sample from table.",
      m: [3, 3],
      p: [
        {
          name: "database",
          detail:
            "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values.",
          example: "A2:F20",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "field",
          detail:
            "Indicates which column in `database` contains the values to be extracted and operated on.",
          example: "G2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "criteria",
          detail:
            "An array or range containing zero or more criteria to filter the `database` values by before operating.",
          example: "A22:D23",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "DSTDEVP",
      t: 17,
      d: "Returns the standard deviation of an entire population selected from a database table-like array or range using a SQL-like query.",
      a: "Standard deviation of entire population from table.",
      m: [3, 3],
      p: [
        {
          name: "database",
          detail:
            "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values.",
          example: "A2:F20",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "field",
          detail:
            "Indicates which column in `database` contains the values to be extracted and operated on.",
          example: "G2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "criteria",
          detail:
            "An array or range containing zero or more criteria to filter the `database` values by before operating.",
          example: "A22:D23",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "DSUM",
      t: 17,
      d: "Returns the sum of values selected from a database table-like array or range using a SQL-like query.",
      a: "Sum of values from a table-like range.",
      m: [3, 3],
      p: [
        {
          name: "database",
          detail:
            "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values.",
          example: "A2:F20",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "field",
          detail:
            "Indicates which column in `database` contains the values to be extracted and operated on.",
          example: "G2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "criteria",
          detail:
            "An array or range containing zero or more criteria to filter the `database` values by before operating.",
          example: "A22:D23",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "DVAR",
      t: 17,
      d: "Returns the variance of a population sample selected from a database table-like array or range using a SQL-like query.",
      a: "Variance of population sample from table-like range.",
      m: [3, 3],
      p: [
        {
          name: "database",
          detail:
            "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values.",
          example: "A2:F20",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "field",
          detail:
            "Indicates which column in `database` contains the values to be extracted and operated on.",
          example: "G2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "criteria",
          detail:
            "An array or range containing zero or more criteria to filter the `database` values by before operating.",
          example: "A22:D23",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "DVARP",
      t: 17,
      d: "Returns the variance of an entire population selected from a database table-like array or range using a SQL-like query.",
      a: "Variance of a population from a table-like range.",
      m: [3, 3],
      p: [
        {
          name: "database",
          detail:
            "The array or range containing the data to consider, structured in such a way that the first row contains the labels for each column's values.",
          example: "A2:F20",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "field",
          detail:
            "Indicates which column in `database` contains the values to be extracted and operated on.",
          example: "G2",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "criteria",
          detail:
            "An array or range containing zero or more criteria to filter the `database` values by before operating.",
          example: "A22:D23",
          require: "m",
          repeat: "n",
          type: "range",
        },
      ],
    },
    {
      n: "AGE_BY_IDCARD",
      t: "3",
      d: "Calculate the age based on the Chinese ID number. Support 15 or 18",
      a: "Get age based on ID number.",
      m: [1, 2],
      p: [
        {
          name: "ID number",
          example: "A1",
          detail: "15-digit or 18-digit ID number or range.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Deadline",
          example: '"2017-10-01"',
          detail:
            "The deadline or range of age calculation. The default is the current day.",
          require: "o",
          repeat: "n",
          type: "rangedatetime",
        },
      ],
    },
    {
      n: "SEX_BY_IDCARD",
      t: "3",
      d: "Calculate gender based on Chinese ID number. Support 15 or 18",
      a: "Get gender based on ID number.",
      m: [1, 1],
      p: [
        {
          name: "ID number",
          example: '"31033519900101XXXX"',
          detail: "15-digit or 18-digit ID number or range.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "BIRTHDAY_BY_IDCARD",
      t: "3",
      d: "Calculate the birthday based on the Chinese ID number. Support 15 or 18",
      a: "Get the birthday based on the ID number.",
      m: [1, 2],
      p: [
        {
          name: "ID number",
          example: '"31033519900101XXXX"',
          detail: "15-digit or 18-digit ID number or range.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Birthday format",
          example: "0",
          detail:
            "Date type, default:0:[1900/01/01], 1:[1900-01-01], 2:[1900年1月1日]",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "PROVINCE_BY_IDCARD",
      t: "3",
      d: "Calculate the province of birthplace based on the Chinese ID number. Support 15 or 18",
      a: "Get the province of birthplace based on the ID number.",
      m: [1, 1],
      p: [
        {
          name: "ID number",
          example: '"31033519900101XXXX"',
          detail: "15-digit or 18-digit ID number or range.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "CITY_BY_IDCARD",
      t: "3",
      d: "Calculate the city of birthplace based on the Chinese ID number. Support 15 or 18",
      a: "Get the city of birthplace based on the ID number.",
      m: [1, 1],
      p: [
        {
          name: "ID number",
          example: '"31033519900101XXXX"',
          detail: "15-digit or 18-digit ID number or range.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "STAR_BY_IDCARD",
      t: "3",
      d: "Calculate the constellation based on the Chinese ID number. Support 15 or 18",
      a: "Get the constellation based on the ID number.",
      m: [1, 1],
      p: [
        {
          name: "ID number",
          example: '"31033519900101XXXX"',
          detail: "15-digit or 18-digit ID number or range.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "ANIMAL_BY_IDCARD",
      t: "3",
      d: "Calculate the zodiac (rat, ox, tiger, rabbit...) based on the Chinese ID number. Support 15 or 18",
      a: "Get the zodiac according to the ID number.",
      m: [1, 1],
      p: [
        {
          name: "ID number",
          example: '"31033519900101XXXX"',
          detail: "15-digit or 18-digit ID number or range.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "ISIDCARD",
      t: "3",
      d: "Verify that the format of the ID card is correct. Support 15 or 18",
      a: "Verify the correctness of the ID card format.",
      m: [1, 1],
      p: [
        {
          name: "ID number",
          example: '"31033519900101XXXX"',
          detail: "15-digit or 18-digit ID number or range.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "DM_TEXT_CUTWORD",
      t: "4",
      d: "Text segmentation. Split a series of words into a series of individual words",
      a: "Chinese text segmentation.",
      m: [1, 2],
      p: [
        {
          name: "Text",
          example: '"I came to Beijing Tsinghua University"',
          detail: "Any text that needs word segmentation.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Word segmentation mode",
          example: "0",
          detail:
            "The default is 0[precision mode], 1[full mode], 2[search engine mode].",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DM_TEXT_TFIDF",
      t: "4",
      d: "Use tf-idf algorithm for keyword extraction. Identify keywords from a series of text",
      a: "tf-idf keyword recognition.",
      m: [1, 3],
      p: [
        {
          name: "Text",
          example: '"I came to Beijing Tsinghua University"',
          detail: "Any text that needs word segmentation.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Number of keywords",
          example: "20",
          detail:
            "The number of keywords returned by the algorithm, the default is 20",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "Corpus",
          example: "1",
          detail:
            "Select a corpus in a specific field, the default is 0[General], 1[Finance], 2[Medical]",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DM_TEXT_TEXTRANK",
      t: "4",
      d: "Use TextRank algorithm to extract keywords. Identify keywords from a series of text",
      a: "TextRank keyword recognition.",
      m: [1, 3],
      p: [
        {
          name: "Text",
          example: '"I came to Beijing Tsinghua University"',
          detail: "Any text that needs word segmentation.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Number of keywords",
          example: "20",
          detail:
            "The number of keywords returned by the algorithm, the default is 20",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "Corpus",
          example: "1",
          detail:
            "Select a corpus in a specific field, the default is 0[General], 1[Finance], 2[Medical]",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DATA_CN_STOCK_CLOSE",
      t: "5",
      d: "According to the stock code and date, return the corresponding stock closing price of A shares.",
      a: "Returns the closing price of stock.",
      m: [1, 3],
      p: [
        {
          name: "Stock code",
          example: '"000001"',
          detail: "6-digit stock code, required.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Date",
          example: "2015-01-08",
          detail:
            "The trading day of the stock, the default is the latest trading day",
          require: "o",
          repeat: "n",
          type: "rangedate",
        },
        {
          name: "Reversion and exclusion",
          example: "0",
          detail:
            "Select the ex right restoration type of the stock, default to 0 [former reversion], 1 [original price], 2 [post reversion]",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DATA_CN_STOCK_OPEN",
      t: "5",
      d: "According to the stock code and date, return the opening price of stock.",
      a: "Return the opening price of a shares.",
      m: [1, 3],
      p: [
        {
          name: "Stock code",
          example: '"000001"',
          detail: "6-digit stock code, required.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Date",
          example: "2015-01-08",
          detail:
            "The trading day of the stock, the default is the latest trading day",
          require: "o",
          repeat: "n",
          type: "rangedate",
        },
        {
          name: "Reversion and exclusion",
          example: "0",
          detail:
            "Select the ex right restoration type of the stock, default to 0 [former reversion], 1 [original price], 2 [post reversion]",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DATA_CN_STOCK_MAX",
      t: "5",
      d: "According to the stock code and date, return the highest price of stock.",
      a: "Return the highest price of stock.",
      m: [1, 3],
      p: [
        {
          name: "Stock code",
          example: '"000001"',
          detail: "6-digit stock code, required.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Date",
          example: "2015-01-08",
          detail:
            "The trading day of the stock, the default is the latest trading day",
          require: "o",
          repeat: "n",
          type: "rangedate",
        },
        {
          name: "Reversion and exclusion",
          example: "0",
          detail:
            "Select the ex right restoration type of the stock, default to 0 [former reversion], 1 [original price], 2 [post reversion]",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DATA_CN_STOCK_MIN",
      t: "5",
      d: "According to the stock code and date, return the lowest price of stock.",
      a: "Returns the lowest price of stock.",
      m: [1, 3],
      p: [
        {
          name: "Stock code",
          example: '"000001"',
          detail: "6-digit stock code, required.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Date",
          example: "2015-01-08",
          detail:
            "The trading day of the stock, the default is the latest trading day",
          require: "o",
          repeat: "n",
          type: "rangedate",
        },
        {
          name: "Reversion and exclusion",
          example: "0",
          detail:
            "Select the ex right restoration type of the stock, default to 0 [former reversion], 1 [original price], 2 [post reversion]",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DATA_CN_STOCK_VOLUMN",
      t: "5",
      d: "According to the stock code and date, return the corresponding stock trading volume of A shares.",
      a: "Returns the corresponding stock trading volume of A shares.",
      m: [1, 3],
      p: [
        {
          name: "Stock code",
          example: '"000001"',
          detail: "6-digit stock code, required.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Date",
          example: "2015-01-08",
          detail:
            "The trading day of the stock, the default is the latest trading day",
          require: "o",
          repeat: "n",
          type: "rangedate",
        },
        {
          name: "Reversion and exclusion",
          example: "0",
          detail:
            "Select the ex right restoration type of the stock, default to 0 [former reversion], 1 [original price], 2 [post reversion]",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "DATA_CN_STOCK_AMOUNT",
      t: "5",
      d: "According to the stock code and date, return the corresponding stock turnover of A shares.",
      a: "Returns the corresponding stock turnover of A shares.",
      m: [1, 3],
      p: [
        {
          name: "Stock code",
          example: '"000001"',
          detail: "6-digit stock code, required.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Date",
          example: "2015-01-08",
          detail:
            "The trading day of the stock, the default is the latest trading day",
          require: "o",
          repeat: "n",
          type: "rangedate",
        },
        {
          name: "Reversion and exclusion",
          example: "0",
          detail:
            "Select the ex right restoration type of the stock, default to 0 [former reversion], 1 [original price], 2 [post reversion]",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "ISDATE",
      t: "6",
      d: "Returns whether a value is a date.",
      a: "Whether a value is a date.",
      m: [1, 1],
      p: [
        {
          name: "value",
          example: '"1990-01-01"',
          detail: "The value to be verified as a date.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "LINESPLINES",
      t: "3",
      d: "Generate sparklines embedded in the cell to describe the continuous trend of data",
      a: "Generate sparklines line chart",
      m: [1, 8],
      p: [
        {
          name: "Range",
          example: "A1:A20",
          detail:
            "Range，Values can be calculated effectively, such as A1:A20, {1,2,3,4,5}, etc.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Line color",
          example: "#2ec7c9",
          detail:
            "The line color of the line graph can be range A1, color table index value or specific color value. Set it to 0 or false to not display it. It supports regx, rgb, rgba, etc. Default #2ec7c9",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Line thickness",
          example: "1",
          detail: "Line thickness of the line graph, the default is 1px",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Auxiliary line",
          example: "avg",
          detail:
            "A horizontal line, which can be min, max, avg, median, range or custom value, default 0 none",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Auxiliary line color",
          example: "#000",
          detail:
            "Color setting of auxiliary line, same as line color configuration, default #000",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Maximum mark",
          example: "#fc5c5c",
          detail:
            "Identifies the maximum value of the line graph, the same line color configuration, default 0 does not display",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Minimum mark",
          example: "#fc5c5c",
          detail:
            "Identify the minimum value of the line graph, the same line color configuration, default 0 does not display",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Mark size",
          example: "1.5",
          detail:
            "The maximum and minimum mark size settings, the default is 1.5",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "AREASPLINES",
      t: "3",
      d: "Generate sparklines embedded in the cell area chart, generally used to describe the continuous cumulative value trend of the data",
      a: "Generate sparklines area chart",
      m: [1, 5],
      p: [
        {
          name: "Range",
          example: "A1:A20",
          detail:
            "Range，Values can be calculated effectively, such as A1:A20, {1,2,3,4,5}, etc.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Line color",
          example: "#2ec7c9",
          detail:
            "The line color of the line graph can be range A1, color table index value or specific color value. Set it to 0 or false to not display it. It supports regx, rgb, rgba, etc. Default #2ec7c9",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Fill color",
          example: "#CCF3F4",
          detail:
            "Form an area chart, the same line color configuration, default 0 does not display",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Line thickness",
          example: "1",
          detail: "Line thickness of the line graph, the default is 1px",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Auxiliary line",
          example: "avg",
          detail:
            "A horizontal line, which can be min, max, avg, median, range or custom value, default 0 none",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Auxiliary line color",
          example: "#000",
          detail:
            "Color setting of auxiliary line, same as line color configuration, default #000",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "COLUMNSPLINES",
      t: "3",
      d: "Generate sparklines embedded in the vertical histogram of cells, generally used to describe the size of discrete data",
      a: "Generate sparklines vertical histogram",
      m: [1, 6],
      p: [
        {
          name: "Range",
          example: "A1:A20",
          detail:
            "Range，Values can be calculated effectively, such as A1:A20, {1,2,3,4,5}, etc.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Bar interval",
          example: "1",
          detail: "The distance between bars, the default is 1",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Bar color",
          example: "#fc5c5c",
          detail:
            "The line color of the line graph can be range A1, color table index value or specific color value. Set it to 0 or false to not display it. It supports regx, rgb, rgba, etc. Default #fc5c5c",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Negative bar color",
          example: "#97b552",
          detail:
            "Negative bar color setting, representing the color of negative value, same as the bar color configuration, default #97b552",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Max",
          example: "100",
          detail:
            "The maximum value of the bar chart, used to standardize the length of the bar chart, the default is to automatically calculate false, auto, null",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Color palette",
          example: "#97b552",
          detail:
            "The color palette can set the color of each bar individually, multiple settings can be set, and two formats are supported: 1 color such as #000, which means that the color of the first bar is black; 2 value range: color, such as -2:# 000 indicates that the bar with a value of -2 is black, 0:5:#000 indicates that the bar with a value of 0-5 is black, and the default is empty",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "STACKCOLUMNSPLINES",
      t: "3",
      d: "Generate sparklines, a cumulative vertical histogram embedded in a cell, generally used to describe the numerical size of multiple dimensions of discrete data",
      a: "Generate sparklines cumulative vertical histogram",
      m: [1, 5],
      p: [
        {
          name: "Range",
          example: "A1:A20",
          detail:
            "Range，Values can be calculated effectively, such as A1:A20, {1,2,3,4,5}, etc.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Stack by column",
          example: "1",
          detail:
            "If you need to stack by row, set this item to false or 0, the default is 1",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Bar interval",
          example: "1",
          detail: "The distance between bars, the default is 1",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Max",
          example: "100",
          detail:
            "The maximum value of the cumulative bar, used to regulate the length of the bar, the default is to automatically calculate false, auto, null",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Color palette",
          example: "#97b552",
          detail:
            "The color palette can individually set the bar color of each dimension, which can be set to the range of A1:A10, etc. The default is #2ec7c9, #fc5c5c, #5ab1ef, #ffb980...",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "BARSPLINES",
      t: "3",
      d: "Generate sparklines embedded in the cell, generally used to describe the size of discrete data",
      a: "Generate sparklines horizontal bar graph",
      m: [1, 6],
      p: [
        {
          name: "Range",
          example: "A1:A20",
          detail:
            "Range，Values can be calculated effectively, such as A1:A20, {1,2,3,4,5}, etc.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Bar interval",
          example: "1",
          detail: "The distance between bars, the default is 1",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Bar color",
          example: "#fc5c5c",
          detail:
            "The line color of the line graph can be range A1, color table index value or specific color value. Set it to 0 or false to not display it. It supports regx, rgb, rgba, etc. Default #fc5c5c",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Negative bar color",
          example: "#97b552",
          detail:
            "Negative bar color setting, representing the color of negative value, same as the bar color configuration, default #97b552",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Max",
          example: "100",
          detail:
            "The maximum value of the bar chart, used to standardize the length of the bar chart, the default is to automatically calculate false, auto, null",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Color palette",
          example: "#97b552",
          detail:
            "The color palette can set the color of each bar individually, multiple settings can be set, and two formats are supported: 1 color such as #000, which means that the color of the first bar is black; 2 value range: color, such as -2:# 000 indicates that the bar with a value of -2 is black, 0:5:#000 indicates that the bar with a value of 0-5 is black, and the default is empty",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "STACKBARSPLINES",
      t: "3",
      d: "Generate sparklines, a cumulative horizontal bar graph embedded in a cell, which is generally used to describe the numerical size of multiple dimensions of discrete data",
      a: "Generate sparklines cumulative horizontal bar graph",
      m: [1, 5],
      p: [
        {
          name: "Range",
          example: "A1:A20",
          detail:
            "Range，Values can be calculated effectively, such as A1:A20, {1,2,3,4,5}, etc.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Stack by column",
          example: "1",
          detail:
            "If you need to stack by row, set this item to false or 0, the default is 1",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Bar interval",
          example: "1",
          detail: "The distance between bars, the default is 1",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Max",
          example: "100",
          detail:
            "The maximum value of the cumulative bar, used to regulate the length of the bar, the default is to automatically calculate false, auto, null",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Color palette",
          example: "#97b552",
          detail:
            "The color palette can individually set the bar color of each dimension, which can be set to the range of A1:A10, etc. The default is #2ec7c9, #fc5c5c, #5ab1ef, #ffb980...",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "DISCRETESPLINES",
      t: "3",
      d: "Создает спарклайны, встроенные в ячейку, обычно используемые для описания тенденции дискретных данных",
      a: "Создание дискретного графика спарклайнов",
      m: [1, 4],
      p: [
        {
          name: "Диапазон",
          example: "A1:A20",
          detail:
            "Диапазон, значения могут быть эффективно рассчитаны, например, A1:A20, {1,2,3,4,5} и т. д.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Порог сегментации",
          example: "1",
          detail:
            "Различие цвета столбца дискретного графика, например: если значение равно 0, синий цвет больше 0, красный цвет меньше 0, а по умолчанию 0",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Цвет выше порога",
          example: "#2ec7c9",
          detail:
            "Цвет линии линейного графика может быть диапазоном A1, значением индекса цветовой таблицы или конкретным значением цвета. Установите значение 0 или ложь, чтобы не отображать его. Поддерживает regx, rgb, rgba и т. д. По умолчанию #2ec7c9",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Цвет ниже порога",
          example: "#fc5c5c",
          detail:
            "Настройка цвета столбца ниже порога, такая же, как цвет выше порога, по умолчанию #fc5c5c",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "TRISTATESPLINES",
      t: "3",
      d: "Создает спарклайны, трехсостояний график, встроенный в ячейку, который обычно используется для описания тенденции трех ситуаций, таких как победа, поражение или ничья.",
      a: "Создание трехсостояний графика спарклайнов",
      m: [1, 6],
      p: [
        {
          name: "Диапазон",
          example: "A1:A20",
          detail:
            "Диапазон, значения могут быть эффективно рассчитаны, например, A1:A20, {1,2,3,4,5} и т. д.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Интервал между столбцами",
          example: "1",
          detail: "Расстояние между столбцами, по умолчанию 1",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Цвет столбца",
          example: "#fc5c5c",
          detail:
            "Цвет линии линейного графика может быть диапазоном A1, значением индекса цветовой таблицы или конкретным значением цвета. Установите значение 0 или ложь, чтобы не отображать его. Поддерживает regx, rgb, rgba и т. д. По умолчанию #fc5c5c",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Цвет отрицательного столбца",
          example: "#97b552",
          detail:
            "Настройка цвета отрицательного столбца, представляющая цвет отрицательного значения, такая же, как конфигурация цвета столбца, по умолчанию #97b552",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Цвет столбца нулевого значения",
          example: "#999",
          detail:
            "Настройка цвета столбца нулевого значения, представляющая цвет значения 0, та же конфигурация цвета столбца, по умолчанию #999",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Цветовая палитра",
          example: "#97b552",
          detail:
            "Цветовая палитра может установить цвет каждого столбца индивидуально, можно установить несколько настроек, и поддерживаются два формата: 1 цвет, например #000, что означает, что цвет первого столбца черный; 2 диапазон значений: цвет, например -2:#000 указывает, что столбец со значением -2 черный, 0:5:#000 указывает, что столбец со значением 0-5 черный, а по умолчанию пусто",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "PIESPLINES",
      t: "3",
      d: "Создает спарклайны в виде круговой диаграммы, встроенные в ячейку, обычно используемые для описания доли данных",
      a: "Создание спарклайнов в виде круговой диаграммы",
      m: [1, 5],
      p: [
        {
          name: "Range",
          example: "A1:A20",
          detail:
            "Диапазон, значения могут быть эффективно рассчитаны, например, A1:A20, {1,2,3,4,5} и т. д.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Rotation angle",
          example: "0",
          detail: "Угол поворота круговой диаграммы, по умолчанию 0",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "border",
          example: "0",
          detail: "Размер границы круговой диаграммы, по умолчанию нет 0",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Border color",
          example: "#000",
          detail: "Цвет границы круговой диаграммы, по умолчанию #000",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Color palette",
          example: "#97b552",
          detail:
            "Цвет среза можно установить в палитре, которую можно установить в диапазоне A1:A10 и т. д. По умолчанию #2ec7c9, #fc5c5c, #5ab1ef, #ffb980...",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "BOXSPLINES",
      t: "3",
      d: "Создает спарклайны в виде ящичной диаграммы, встроенные в ячейку, обычно используемые для описания статистического распределения набора данных",
      a: "Создание ящичной диаграммы спарклайнов",
      m: [1, 4],
      p: [
        {
          name: "Range",
          example: "A1:A20",
          detail:
            "Диапазон, значения могут быть эффективно рассчитаны, например, A1:A20, {1,2,3,4,5} и т. д.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Outlier ratio",
          example: "1.5",
          detail:
            "Пороговый диапазон выбросов, если он равен 0 или ложь, он не будет отображаться, по умолчанию 1.5 раза",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Target value",
          example: "10",
          detail:
            "Настройка целевого значения на ящичной диаграмме, по умолчанию ложь и не отображается",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Point size",
          example: "1.5",
          detail:
            "Устанавливается радиус целевой точки и выброса, по умолчанию 1.5",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "BULLETSPLINES",
      t: "3",
      d: "Создает спарклайны, встроенные в ячейку, обычно используемые для описания степени выполнения задачи",
      a: "Создание пульсовых спарклайнов",
      m: [2, 3],
      p: [
        {
          name: "Target",
          example: "10",
          detail:
            "Числовое значение может быть эффективно рассчитано для достигнутого целевого значения, например, A1, 100 и т. д.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "achieved",
          example: "8",
          detail:
            "Значение может быть эффективно рассчитано только при завершении значения, например, A1, 100 и т. д.",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "Contrast",
          example: "12",
          detail:
            "Сравнительные значения, такие как превышение, минимум и нижняя граница для наград, могут быть эффективно рассчитаны, например, A1, 100 и т. д. Вы можете настроить до 9 значений сравнения",
          require: "o",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "COMPOSESPLINES",
      t: "3",
      d: "Поддерживает несколько типов рисунков в одной ячейке, каждый параметр представляет собой спарклайн-диаграмму",
      a: "Объединение спарклайн-графиков в одну ячейку",
      m: [1, 1],
      p: [
        {
          name: "config",
          example: "PIESPLINES(A1:A20)",
          detail:
            "Настройки спарклайн-диаграммы, такие как A1:A20, завершенная круговая диаграмма, настройки линейной диаграммы и т. д.",
          require: "m",
          repeat: "y",
          type: "rangeall",
        },
      ],
    },
    {
      n: "SORT",
      t: "14",
      d: "Сортирует строки заданного массива или диапазона по значениям в одном или нескольких столбцах.",
      a: "Сортирует строки диапазона по указанному столбцу.",
      m: [1, 4],
      p: [
        {
          name: "range",
          detail: "Данные для сортировки.",
          example: "A2:A17",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "sort_column",
          detail:
            "Индекс столбца в `диапазоне` или диапазон вне `диапазона`, содержащий значения, по которым нужно сортировать.",
          example: "1",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "is_ascending",
          detail:
            "`ИСТИНА` или `ЛОЖЬ`, указывающие, нужно ли сортировать `столбец_сортировки` по возрастанию. `ЛОЖЬ` сортирует по убыванию.",
          example: "-1",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "sort_column2",
          detail: "Дополнительные столбцы.",
          example: "TRUE()",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "FILTER",
      t: "14",
      d: "Возвращает отфильтрованную версию исходного диапазона, возвращая только строки или столбцы, которые соответствуют указанным условиям.",
      a: "Фильтрует диапазон на основе предоставленных условий.",
      m: [2, 3],
      p: [
        {
          name: "range",
          detail: "Данные для фильтрации.",
          example: "A5:D20",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "condition1",
          detail:
            "Столбец или строка, содержащие значения истина или ложь, соответствующие первому столбцу или строке `диапазона`, или формула массива, вычисляющая истину или ложь.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "range",
        },
        {
          name: "condition2",
          detail:
            "Дополнительные строки или столбцы, содержащие логические значения `ИСТИНА` или `ЛОЖЬ`, указывающие, должна ли соответствующая строка или столбец в `диапазоне` пройти через `ФИЛЬТР`. Также может содержать выражения формул массивов, которые вычисляют такие строки или столбцы. Все условия должны быть одного типа (строка или столбец). Смешивание условий строк и условий столбцов не допускается.",
          example: '""',
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "UNIQUE",
      t: "14",
      d: "Возвращает уникальные строки в предоставленном исходном диапазоне, отбрасывая дубликаты. Строки возвращаются в том порядке, в котором они впервые появляются в исходном диапазоне.",
      a: "Уникальные строки в предоставленном исходном диапазоне.",
      m: [1, 3],
      p: [
        {
          name: "range",
          detail: "Данные для фильтрации по уникальным записям.",
          example: "A2:B26",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "by_col",
          detail:
            "[Необязательно] - Логическое значение, указывающее, как сравнивать; по строке = ЛОЖЬ() или опущено; по столбцу = ИСТИНА().",
          example: "TRUE()",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
        {
          name: "occurs_once",
          detail:
            "[Необязательно] - Логическое значение, возвращается только одно вхождение в уникальном значении = ИСТИНА(); включая все уникальные значения = ЛОЖЬ() или опущено.",
          example: "FALSE()",
          require: "o",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "RANDARRAY",
      t: "14",
      d: "Возвращает сетку случайных чисел от 0 включительно до 1 исключительно. Размер сетки будет соответствовать предоставленным аргументам строк и столбцов. Если ни строки, ни столбцы не указаны, размер сетки будет 1 x 1.",
      a: "Возвращает сетку случайных чисел.",
      m: [0, 2],
      p: [
        {
          name: "строки",
          detail: "Количество строк для заполнения случайным числом.",
          example: "1",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "столбцы",
          detail: "Количество столбцов для заполнения случайным числом.",
          example: "1",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "SEQUENCE",
      t: "14",
      d: "Возвращает сетку последовательных чисел, начиная с указанного начального значения и увеличиваясь на указанный размер шага. По умолчанию последовательность начинается с 1 и увеличивается на 1.",
      a: "Возвращает сетку последовательных чисел.",
      m: [1, 4],
      p: [
        {
          name: "строки",
          detail: "Количество строк в результирующей сетке функции.",
          example: "1",
          require: "m",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "столбцы",
          detail:
            "Количество столбцов в результирующей сетке функции. Если опущено, результирующая сетка будет иметь 1 столбец.",
          example: "1",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "начало",
          detail:
            "Число, с которого начинается последовательность. Если опущено, последовательность начнется с 1.",
          example: "1",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
        {
          name: "шаг",
          detail:
            "Величина, на которую будет отличаться каждое значение в последовательности. Если опущено, каждое значение будет отличаться на 1.",
          example: "1",
          require: "o",
          repeat: "n",
          type: "rangenumber",
        },
      ],
    },
    {
      n: "EVALUATE",
      t: "3",
      d: "Вычисляет формулу или выражение, заданное словами, и возвращает результат",
      a: "Вычисляет в соответствии с буквальной формулой или выражением.",
      m: [1, 1],
      p: [
        {
          name: "expression",
          example: '"A1+5*2^2"',
          detail: "Формула или выражение",
          require: "m",
          repeat: "n",
          type: "rangeall",
        },
      ],
    },
    {
      n: "REMOTE",
      t: "5",
      d: "Вызывает функцию на удаленном сервере",
      a: "Вызывает функцию на удаленном внутреннем сервере/API.",
      m: [1, 1],
      p: [
        {
          name: "remote_expression",
          example: "SUM(A1:A10000000)",
          detail: "Формула",
          require: "m",
          repeat: "n",
          type: "string",
        },
      ],
    },
  ],
  toolbar: {
    toolbar: "Панель инструментов",
    undo: "Отменить",
    redo: "Повторить",
    "clear-format": "Очистить формат",
    "format-painter": "Копировать формат",
    paintFormat: "Копирование формата",
    "currency-format": "Формат как валюта",
    "percentage-format": "Формат как процент",
    "number-decrease": "Уменьшить десятичные разряды",
    "number-increase": "Увеличить десятичные разряды",
    moreFormats: "Больше форматов",
    "border-all": "Все границы",
    "merge-all": "Объединить все ячейки",
    format: "Формат",
    font: "Шрифт",
    "font-size": "Размер шрифта",
    bold: "Жирный (Ctrl+B)",
    italic: "Курсив (Ctrl+I)",
    "strike-through": "Зачеркнутый (Alt+Shift+5)",
    underline: "Подчеркнутый",
    "font-color": "Цвет шрифта",
    "align-left": "Выровнять по левому краю",
    "align-center": "Выровнять по центру по горизонтали",
    "align-right": "Выровнять по правому краю",
    "align-top": "Выровнять по верхнему краю",
    "align-mid": "Выровнять по центру по вертикали",
    "align-bottom": "Выровнять по нижнему краю",
    chooseColor: "Выберите цвет",
    resetColor: "Сбросить",
    customColor: "ПОЛЬЗОВАТЕЛЬСКИЙ",
    alternatingColors: "Чередующиеся цвета",
    confirmColor: "OK",
    cancelColor: "Отмена",
    collapse: "Свернуть",
    background: "Цвет заливки",
    border: "Граница",
    borderStyle: "Стиль границы",
    "merge-cell": "Объединить ячейки",
    chooseMergeType: "Выберите тип объединения",
    horizontalAlign: "Горизонтальное выравнивание",
    verticalAlign: "Вертикальное выравнивание",
    alignment: "Выравнивание",
    textWrap: "Перенос текста",
    textWrapMode: "Режим переноса текста",
    textRotate: "Поворот текста",
    textRotateMode: "Режим поворота текста",
    freeze: "Закрепить",
    sort: "Сортировка",
    filter: "Фильтр",
    sortAndFilter: "Сортировка и фильтр",
    findAndReplace: "Найти и заменить",
    "formula-sum": "СУММА",
    autoSum: "Авто СУММА",
    moreFunction: "Больше функций",
    conditionalFormat: "Условное форматирование",
    comment: "Комментарий",
    pivotTable: "Сводная таблица",
    chart: "Диаграмма",
    screenshot: "Снимок экрана",
    splitColumn: "Разделить текст",
    insertImage: "Вставить изображение",
    insertLink: "Вставить ссылку",
    dataVerification: "Проверка данных",
    protection: "Защитить лист",

    clearText: "Очистить цвет",
    noColorSelectedText: "Цвет не выбран",

    toolMore: "Больше",
    toolLess: "Меньше",
    toolClose: "Закрыть",
    toolMoreTip: "Больше функций",
    moreOptions: "Больше параметров",

    cellFormat: "Настройка формата ячейки",
    print: "Печать",
  },
  alternatingColors: {
    applyRange: "Применить к диапазону",
    selectRange: "Выберите диапазон данных",
    header: "Заголовок",
    footer: "Нижний колонтитул",

    errorInfo:
      "Невозможно выполнить эту операцию для нескольких областей выделения, выберите одну область и повторите попытку",
    textTitle: "Стиль формата",
    custom: "ПОЛЬЗОВАТЕЛЬСКИЙ",
    close: "закрыть",
    selectionTextColor: "Нажмите, чтобы выбрать цвет текста",
    selectionCellColor: "Нажмите, чтобы выбрать цвет ячейки",
    removeColor: "Удалить чередующиеся цвета",
    colorShow: "цвет",
    currentColor: "Текущий",

    tipSelectRange: "Пожалуйста, выберите диапазон чередующихся цветов",
    errorNoRange: "Диапазон не выбран",
    errorExistColors:
      "Чередующиеся цвета уже существуют и не могут быть изменены",
  },
  button: {
    confirm: "OK",
    cancel: "Отмена",
    close: "Закрыть",
    update: "Обновить",
    delete: "Удалить",
    insert: "Вставить",
    prevPage: "Предыдущая",
    nextPage: "Следующая",
    total: "всего:",
  },
  paint: {
    start: "Начать копирование формата",
    end: "ESC",

    tipSelectRange: "Пожалуйста, выберите диапазон для копирования",
    tipNotMulti:
      "Невозможно выполнить эту операцию для нескольких выбранных диапазонов",
  },
  format: {
    moreCurrency: "Больше форматов валюты",
    moreDateTime: "Больше форматов даты и времени",
    moreNumber: "Больше форматов чисел",

    titleCurrency: "Форматы валюты",
    decimalPlaces: "Десятичные знаки",
    titleDateTime: "Форматы даты и времени",
    titleNumber: "Форматы чисел",
    tipDecimalPlaces: "Количество десятичных знаков должно быть от 0 до 9!",
    select: "Выбрать",
    format: "формат",
    currency: "валюта",
  },
  info: {
    detailUpdate: "Открыто заново",
    detailSave: "Локальный кэш восстановлен",
    row: "",
    column: "",
    loading: "Загрузка...",

    copy: "Копировать",
    return: "Выйти",
    rename: "Переименовать",
    tips: "Переименование книги",
    noName: "Безымянная таблица",
    wait: "Ожидание обновления",

    add: "Добавить",
    addLast: "Добавить строки в конец",
    backTop: "Вернуться наверх",
    pageInfo: "Всего ${total}, ${totalPage} страниц, текущая ${currentPage}",
    nextPage: "Следующая",

    tipInputNumber: "Введите число",
    tipInputNumberLimit: "Диапазон увеличения ограничен от 1 до 100",

    tipRowHeightLimit: "Высота строки должна быть от 0 до 545",
    tipColumnWidthLimit: "Ширина столбца должна быть от 0 до 2038",
    pageInfoFull: "Всего ${total}, ${totalPage} страниц, отображены все данные",

    sheetIsFocused: "Фокус на листе включен.",
    sheetNotFocused: "Фокус на листе отключен.",
    sheetSrIntro:
      "Чтобы переключить фокус на лист для работы с панелью инструментов и навигацией вне листа, используйте Shift + Control + F.",
    currentCellInput: "Текущее содержимое ячейки",
    newSheet: "Новый лист",
    sheetOptions: "Параметры листа",
    Dropdown: "Выпадающий список",
    zoomIn: "Увеличить",
    zoomOut: "Уменьшить",
    toggleSheetFocusShortcut: "Переключить фокус на лист: Shift + Control + F.",
    selectRangeShortcut: "Выбрать диапазон: Shift + стрелки.",
    autoFillDownShortcut:
      "Автозаполнение вниз из первой ячейки: Control или Meta + D.",
    autoFillRightShortcut:
      "Автозаполнение вправо из первой ячейки: Control или Meta + R.",
    boldTextShortcut: "Жирный текст: Control или Meta + B.",
    copyShortcut: "Копировать: Control или Meta + C.",
    pasteShortcut: "Вставить: Control или Meta + V.",
    undoShortcut: "Отменить: Control или Meta + Z.",
    redoShortcut: "Повторить: Control или Meta + Shift + Z.",
    deleteCellContentShortcut:
      "Удалить содержимое ячейки: Delete или Backspace.",
    confirmCellEditShortcut:
      "Подтвердить редактирование ячейки и перейти вниз: Enter.",
    moveRightShortcut: "Переместиться вправо: Tab.",
    moveLeftShortcut: "Переместиться влево: Shift + Tab.",
    shortcuts: "Горячие клавиши",
  },
  currencyDetail: [
    { name: "RMB", pos: "before", value: "¥" },
    { name: "US dollar", pos: "before", value: "$" },
    { name: "EUR", pos: "before", value: "€" },
    { name: "GBP", pos: "before", value: "￡" },
    { name: "HK", pos: "before", value: "$" },
    { name: "JPY", pos: "before", value: "￥" },
    { name: "Albanian Lek", pos: "before", value: "Lek" },
    { name: "Algerian Dinar", pos: "before", value: "din" },
    { name: "Afghani", pos: "after", value: "Af" },
    { name: "Argentine Peso", pos: "before", value: "$" },
    { name: "United Arab Emirates Dirham", pos: "before", value: "dh" },
    { name: "Aruban Florin", pos: "before", value: "Afl" },
    { name: "Omani Rial", pos: "before", value: "Rial" },
    { name: "Azerbaijani manat", pos: "before", value: "?" },
    { name: "Egyptian Pound", pos: "before", value: "￡" },
    { name: "Ethiopian Birr", pos: "before", value: "Birr" },
    { name: "Angola Kwanza", pos: "before", value: "Kz" },
    { name: "Australian Dollar", pos: "before", value: "$" },
    { name: "Patacas", pos: "before", value: "MOP" },
    { name: "Barbados Dollar", pos: "before", value: "$" },
    { name: "Papua New Guinea Kina", pos: "before", value: "PGK" },
    { name: "Bahamian Dollar", pos: "before", value: "$" },
    { name: "Pakistan Rupee", pos: "before", value: "Rs" },
    { name: "Paraguayan Guarani", pos: "after", value: "Gs" },
    { name: "Bahraini Dinar", pos: "before", value: "din" },
    { name: "Panamanian Balboa", pos: "before", value: "B/" },
    { name: "Brazilian real", pos: "before", value: "R$" },
    { name: "Belarusian ruble", pos: "after", value: "р" },
    { name: "Bermudian Dollar", pos: "before", value: "$" },
    { name: "Bulgarian Lev", pos: "before", value: "lev" },
    { name: "Iceland Krona", pos: "before", value: "kr" },
    { name: "Bosnia-Herzegovina Convertible Mark", pos: "before", value: "KM" },
    { name: "Polish Zloty", pos: "after", value: "z?" },
    { name: "Boliviano", pos: "before", value: "Bs" },
    { name: "Belize Dollar", pos: "before", value: "$" },
    { name: "Botswana Pula", pos: "before", value: "P" },
    { name: "Not Dannuzhamu", pos: "before", value: "Nu" },
    { name: "Burundi Franc", pos: "before", value: "FBu" },
    { name: "North Korean Won", pos: "before", value: "?KP" },
    { name: "Danish Krone", pos: "after", value: "kr" },
    { name: "East Caribbean Dollar", pos: "before", value: "$" },
    { name: "Dominica Peso", pos: "before", value: "RD$" },
    { name: "Russian Ruble", pos: "after", value: "?" },
    { name: "Eritrean Nakfa", pos: "before", value: "Nfk" },
    { name: "CFA franc", pos: "before", value: "CFA" },
    { name: "Philippine Peso", pos: "before", value: "?" },
    { name: "Fiji Dollar", pos: "before", value: "$" },
    { name: "Cape Verde Escudo", pos: "before", value: "CVE" },
    { name: "Falkland Islands Pound", pos: "before", value: "￡" },
    { name: "Gambian Dalasi", pos: "before", value: "GMD" },
    { name: "Congolese franc", pos: "before", value: "FrCD" },
    { name: "Colombian Peso", pos: "before", value: "$" },
    { name: "Costa Rican Colon", pos: "before", value: "?" },
    { name: "Cuban Peso", pos: "before", value: "$" },
    { name: "Cuban convertible peso", pos: "before", value: "$" },
    { name: "Guyana Dollar", pos: "before", value: "$" },
    { name: "Kazakhstan Tenge", pos: "before", value: "?" },
    { name: "Haitian gourde", pos: "before", value: "HTG" },
    { name: "won", pos: "before", value: "?" },
    { name: "Netherlands Antilles Guilder", pos: "before", value: "NAf." },
    { name: "Honduras lempiras", pos: "before", value: "L" },
    { name: "Djibouti Franc", pos: "before", value: "Fdj" },
    { name: "Kyrgyzstan Som", pos: "before", value: "KGS" },
    { name: "Guinea Franc", pos: "before", value: "FG" },
    { name: "Canadian Dollar", pos: "before", value: "$" },
    { name: "Ghanaian Cedi", pos: "before", value: "GHS" },
    { name: "Cambodian riel", pos: "before", value: "Riel" },
    { name: "Czech Koruna", pos: "after", value: "K?" },
    { name: "Zimbabwe Dollar", pos: "before", value: "$" },
    { name: "Qatari Riyal", pos: "before", value: "Rial" },
    { name: "Cayman Islands Dollar", pos: "before", value: "$" },
    { name: "Comorian franc", pos: "before", value: "CF" },
    { name: "Kuwaiti Dinar", pos: "before", value: "din" },
    { name: "Croatian Kuna", pos: "before", value: "kn" },
    { name: "Kenyan Shilling", pos: "before", value: "Ksh" },
    { name: "Lesotho Loti", pos: "before", value: "LSL" },
    { name: "Lao Kip", pos: "before", value: "?" },
    { name: "Lebanese Pound", pos: "before", value: "L￡" },
    { name: "Lithuanian litas", pos: "before", value: "Lt" },
    { name: "Libyan Dinar", pos: "before", value: "din" },
    { name: "Liberian Dollar", pos: "before", value: "$" },
    { name: "Rwanda Franc", pos: "before", value: "RF" },
    { name: "Romanian Leu", pos: "before", value: "RON" },
    { name: "Malagasy Ariary", pos: "before", value: "Ar" },
    { name: "Maldivian Rufiyaa", pos: "before", value: "Rf" },
    { name: "Malawi Kwacha", pos: "before", value: "MWK" },
    { name: "Malaysian Ringgit", pos: "before", value: "RM" },
    { name: "Macedonia wearing Dinar", pos: "before", value: "din" },
    { name: "Mauritius Rupee", pos: "before", value: "MURs" },
    { name: "Mauritanian Ouguiya", pos: "before", value: "MRO" },
    { name: "Mongolian Tugrik", pos: "before", value: "?" },
    { name: "Bangladeshi Taka", pos: "before", value: "?" },
    { name: "Peruvian Nuevo Sol", pos: "before", value: "S/" },
    { name: "Myanmar Kyat", pos: "before", value: "K" },
    { name: "Moldovan Leu", pos: "before", value: "MDL" },
    { name: "Moroccan Dirham", pos: "before", value: "dh" },
    { name: "Mozambique Metical", pos: "before", value: "MTn" },
    { name: "Mexican Peso", pos: "before", value: "$" },
    { name: "Namibian Dollar", pos: "before", value: "$" },
    { name: "South African Rand", pos: "before", value: "R" },
    { name: "South Sudanese Pound", pos: "before", value: "￡" },
    { name: "Nicaragua Cordoba", pos: "before", value: "C$" },
    { name: "Nepalese Rupee", pos: "before", value: "Rs" },
    { name: "Nigerian Naira", pos: "before", value: "?" },
    { name: "Norwegian Krone", pos: "after", value: "kr" },
    { name: "Georgian Lari", pos: "before", value: "GEL" },
    { name: "Swedish Krona", pos: "after", value: "kr" },
    { name: "Swiss Franc", pos: "before", value: "CHF" },
    { name: "Serbian Dinar", pos: "before", value: "din" },
    { name: "Sierra Leone", pos: "before", value: "SLL" },
    { name: "Seychelles Rupee", pos: "before", value: "SCR" },
    { name: "Saudi Riyal", pos: "before", value: "Rial" },
    { name: "Sao Tome Dobra", pos: "before", value: "Db" },
    { name: "Saint Helena pound", pos: "before", value: "￡" },
    { name: "Sri Lanka Rupee", pos: "before", value: "Rs" },
    { name: "Swaziland Lilangeni", pos: "before", value: "SZL" },
    { name: "Sudanese Pound", pos: "before", value: "SDG" },
    { name: "Surinamese dollar", pos: "before", value: "$" },
    { name: "Solomon Islands Dollar", pos: "before", value: "$" },
    { name: "Somali Shilling", pos: "before", value: "SOS" },
    { name: "Tajikistan Somoni", pos: "before", value: "Som" },
    { name: "Pacific Franc", pos: "after", value: "FCFP" },
    { name: "Thai Baht", pos: "before", value: "?" },
    { name: "Tanzanian Shilling", pos: "before", value: "TSh" },
    { name: "Tongan Pa'anga", pos: "before", value: "T$" },
    { name: "Trinidad and Tobago Dollar", pos: "before", value: "$" },
    { name: "Tunisian Dinar", pos: "before", value: "din" },
    { name: "Turkish Lira", pos: "before", value: "?" },
    { name: "Vanuatu Vatu", pos: "before", value: "VUV" },
    { name: "Guatemalan Quetzal", pos: "before", value: "Q" },
    { name: "Commission Bolivar", pos: "before", value: "Bs" },
    { name: "Brunei Dollar", pos: "before", value: "$" },
    { name: "Ugandan Shilling", pos: "before", value: "UGX" },
    { name: "Ukrainian Hryvnia", pos: "before", value: "грн." },
    { name: "Uruguayan Peso", pos: "before", value: "$" },
    { name: "Uzbekistan som", pos: "before", value: "so?m" },
    { name: "Western Samoa Tala", pos: "before", value: "WST" },
    { name: "Singapore Dollar", pos: "before", value: "$" },
    { name: "NT", pos: "before", value: "NT$" },
    { name: "New Zealand Dollar", pos: "before", value: "$" },
    { name: "Hungarian Forint", pos: "before", value: "Ft" },
    { name: "Syrian Pound", pos: "before", value: "￡" },
    { name: "Jamaican Dollar", pos: "before", value: "$" },
    { name: "Armenian Dram", pos: "before", value: "Dram" },
    { name: "Yemeni Rial", pos: "before", value: "Rial" },
    { name: "Iraqi Dinar", pos: "before", value: "din" },
    { name: "Iranian Rial", pos: "before", value: "Rial" },
    { name: "New Israeli Shekel", pos: "before", value: "?" },
    { name: "Indian Rupee", pos: "before", value: "₹" },
    { name: "Indonesian Rupiah", pos: "before", value: "Rp" },
    { name: "Jordanian Dinar", pos: "before", value: "din" },
    { name: "VND", pos: "after", value: "?" },
    { name: "Zambian Kwacha", pos: "before", value: "ZMW" },
    { name: "Gibraltar Pound", pos: "before", value: "￡" },
    { name: "Chilean Peso", pos: "before", value: "$" },
    { name: "CFA Franc BEAC", pos: "before", value: "FCFA" },
  ],
  numberFmtList: [
    { name: "Вольты", pos: "after", value: "V" },
    { name: "Амперы", pos: "after", value: "A" },
    { name: "Омы", pos: "after", value: "Ω" },
  ],
  defaultFmt: (currency: string) => [
    { text: "Автоматический", value: "General", example: "" },
    { text: "Обычный текст", value: "@", example: "" },
    { text: "", value: "split", example: "" },
    { text: "Число", value: "##0.00", example: "1000.12" },
    { text: "Процент", value: "#0.00%", example: "12.21%" },
    { text: "Научный", value: "0.00E+00", example: "1.01E+5" },
    { text: "", value: "split", example: "" },
    {
      text: "Бухгалтерский",
      value: `${currency}(0.00)`,
      example: `${currency}(1200.09)`,
    },

    {
      text: "Валюта",
      value: `${currency}0.00`,
      example: `${currency}1200.09`,
    },

    { text: "", value: "split", example: "" },
    { text: "Дата", value: "yyyy-MM-dd", example: "2017-11-29" },
    { text: "Время", value: "hh:mm AM/PM", example: "3:00 PM" },
    { text: "Время 24H", value: "hh:mm", example: "15:00" },
    {
      text: "Дата и время",
      value: "yyyy-MM-dd hh:mm AM/PM",
      example: "2017-11-29 3:00 PM",
    },
    {
      text: "Дата и время 24 H",
      value: "yyyy-MM-dd hh:mm",
      example: "2017-11-29 15:00",
    },
    { text: "", value: "split", example: "" },
    {
      text: "Пользовательские форматы",
      value: "fmtOtherSelf",
      example: "",
      icon: "rightArrow",
    },
  ],
  dateFmtList: [
    {
      name: "1930-08-05",
      value: "yyyy-MM-dd",
    },
    {
      name: "1930/8/5",
      value: "yyyy/MM/dd",
    },
    {
      name: "08-05",
      value: "MM-dd",
    },
    {
      name: "8-5",
      value: "M-d",
    },
    {
      name: "13:30:30",
      value: "h:mm:ss",
    },
    {
      name: "13:30",
      value: "h:mm",
    },
    {
      name: "PM 01:30",
      value: "AM/PM hh:mm",
    },
    {
      name: "PM 1:30",
      value: "AM/PM h:mm",
    },
    {
      name: "PM 1:30:30",
      value: "AM/PM h:mm:ss",
    },
    {
      name: "08-05 PM 01:30",
      value: "MM-dd AM/PM hh:mm",
    },
  ],
  fontFamily: {
    MicrosoftYaHei: "YaHei",
  },
  fontarray: ["Times New Roman", "Arial", "Tahoma", "Verdana"],
  fontjson: { "times new roman": 0, arial: 1, tahoma: 2, verdana: 3 },
  border: {
    borderTop: "Верхняя граница",
    borderBottom: "Нижняя граница",
    borderLeft: "Левая граница",
    borderRight: "Правая граница",
    borderNone: "Без границы",
    borderAll: "Все границы",
    borderOutside: "Внешняя граница",
    borderInside: "Внутренние границы",
    borderHorizontal: "Горизонтальные границы",
    borderVertical: "Вертикальные границы",
    borderColor: "Цвет границы",
    borderSize: "Размер границы",
    borderSlash: "Диагональная граница",
    borderDefault: "По умолчанию",
    borderStyle: "Стиль границы",
  },
  merge: {
    mergeAll: "Объединить все",
    mergeV: "Объединить по вертикали",
    mergeH: "Объединить по горизонтали",
    mergeCancel: "Разъединить",
    overlappingError: "Невозможно объединить пересекающиеся области",
    partiallyError:
      "Невозможно выполнить операцию на частично объединенных ячейках",
  },
  align: {
    left: "Слева",
    center: "По центру",
    right: "Справа",

    top: "Сверху",
    middle: "По середине",
    bottom: "Снизу",
  },
  textWrap: {
    overflow: "Переполнение",
    wrap: "Перенос",
    clip: "Обрезка",
  },
  rotation: {
    none: "Нет",
    angleup: "Наклон вверх",
    angledown: "Наклон вниз",
    vertical: "Расположить вертикально",
    rotationUp: "Повернуть вверх",
    rotationDown: "Повернуть вниз",
  },
  freezen: {
    default: "Закрепить",
    freezenRow: "Первая строка",
    freezenColumn: "Первый столбец",
    freezenRC: "Оба",
    freezenRowRange: "Закрепить до текущей строки",
    freezenColumnRange: "Закрепить до текущего столбца",
    freezenRCRange: "Закрепить до текущей ячейки",
    freezenCancel: "Отменить закрепление",

    noSeletionError: "Диапазон не выбран",
    rangeRCOverErrorTitle: "Напоминание о закреплении",
    rangeRCOverError:
      "Область закрепления выходит за пределы" +
      " видимого диапазона, что может привести к некорректной " +
      "работе. Пожалуйста, сбросьте закрепленную область.",
  },
  sort: {
    asc: "По возрастанию",
    desc: "По убыванию",
    custom: "Пользовательская сортировка",

    hasTitle: "Данные содержат заголовок",
    sortBy: "Сортировать по",
    addOthers: "Добавить еще один столбец для сортировки",
    close: "Закрыть",
    confirm: "Сортировать",

    columnOperation: "Столбец",
    secondaryTitle: "затем по",

    sortTitle: "Сортировка диапазона",

    sortRangeTitle: "Сортировать диапазон от",
    sortRangeTitleTo: "до",

    noRangeError:
      "Невозможно выполнить эту операцию для нескольких выделенных областей, пожалуйста, выберите один диапазон и попробуйте снова",
    mergeError:
      "В выделенной области есть объединенные ячейки, эта операция невозможна!",
  },
  filter: {
    filter: "Создать фильтр",

    sortByAsc: "Сортировка по возрастанию",
    sortByDesc: "Сортировка по убыванию",
    filterByColor: "Фильтр по цвету",
    filterByCondition: "Фильтр по условию",
    filterByValues: "Фильтр по значениям",

    filiterInputNone: "Нет",

    filiterInputTip: "Введите значение для фильтра",
    filiterRangeStartTip: "Значение для формулы",
    filiterRangeEndTip: "Значение для формулы",

    filterValueByAllBtn: "Выбрать все",
    filterValueByClearBtn: "Очистить",
    filterValueByInverseBtn: "Инвертировать",
    filterValueByTip: "Фильтр по значениям",
    filterConform: "Подтвердить",
    filterCancel: "Отмена",
    clearFilter: "Очистить фильтр",

    conditionNone: "Нет",
    conditionCellIsNull: "Пустая",
    conditionCellNotNull: "Не пустая",
    conditionCellTextContain: "Текст содержит",
    conditionCellTextNotContain: "Текст не содержит",
    conditionCellTextStart: "Текст начинается с",
    conditionCellTextEnd: "Текст заканчивается на",
    conditionCellTextEqual: "Текст точно соответствует",
    conditionCellDateEqual: "Дата равна",
    conditionCellDateBefore: "Дата до",
    conditionCellDateAfter: "Дата после",
    conditionCellGreater: "Больше чем",
    conditionCellGreaterEqual: "Больше или равно",
    conditionCellLess: "Меньше чем",
    conditionCellLessEqual: "Меньше или равно",
    conditionCellEqual: "Равно",
    conditionCellNotEqual: "Не равно",
    conditionCellBetween: "Находится между",
    conditionCellNotBetween: "Не находится между",

    filiterMoreDataTip: "Большой объем данных! Пожалуйста, подождите",
    filiterMonthText: "Месяц",
    filiterYearText: "Год",
    filiterByColorTip: "Фильтровать по цвету ячейки",
    filiterByTextColorTip: "Фильтровать по цвету шрифта",
    filterContainerOneColorTip: "В этом столбце только один цвет",
    filterDateFormatTip: "Формат даты",

    valueBlank: "(Пусто)",
    mergeError:
      "В выделенной области есть объединенные ячейки, эта операция невозможна!",
  },
  rightclick: {
    copy: "Копировать",
    copyAs: "Копировать как",
    paste: "Вставить",
    insert: "Вставить",
    image: "Вставить изображение",
    link: "Вставить ссылку",
    delete: "Удалить",
    deleteCell: "Удалить ячейку",
    deleteSelected: "Удалить выбранное ",
    hide: "Скрыть",
    hideSelected: "Скрыть выбранное ",
    showHide: "Показать скрытое",
    to: "К",
    left: "Влево",
    right: "Вправо",
    top: "Вверх",
    bottom: "Вниз",
    moveLeft: "Переместить влево",
    moveUp: "Переместить вверх",
    add: "Добавить",
    row: "Строка ",
    column: "Столбец",
    width: "Ширина",
    height: "Высота",
    number: "Число",
    confirm: "Подтвердить",
    orderAZ: "Сортировка по возрастанию",
    orderZA: "Сортировка по убыванию",
    clearContent: "Очистить содержимое",
    matrix: "Операция с матрицей",
    sortSelection: "Сортировка",
    filterSelection: "Фильтр",
    chartGeneration: "Создать диаграмму",
    firstLineTitle: "Первая строка — заголовок",
    untitled: "Без названия",
    array1: "Одномерный массив",
    array2: "Двумерный массив",
    array3: "Многомерный массив",
    diagonal: "Диагональ",
    antiDiagonal: "Антидиагональ",
    diagonalOffset: "Смещение диагонали",
    offset: "Смещение",
    boolean: "Булево",
    flip: "Отразить",
    upAndDown: "Вверх и вниз",
    leftAndRight: "Влево и вправо",
    clockwise: "По часовой стрелке",
    counterclockwise: "Против часовой стрелки",
    transpose: "Транспонировать",
    matrixCalculation: "Вычисление матрицы",
    plus: "Сложение",
    minus: "Вычитание",
    multiply: "Умножение",
    divided: "Деление",
    power: "Возведение в степень",
    root: "Корень",
    log: "Логарифм",
    delete0: "Удалить нулевые значения на краях",
    removeDuplicate: "Удалить дубликаты",
    byRow: "По строкам",
    byCol: "По столбцам",
    generateNewMatrix: "Создать новую матрицу",
    noMulti:
      "Невозможно выполнить эту операцию для нескольких выделенных областей, пожалуйста, выберите одну область",
    cannotDeleteAllRow: "Нельзя удалить все строки",
    cannotDeleteAllColumn: "Нельзя удалить все столбцы",
    cannotDeleteRowReadOnly:
      "Нельзя удалить строку, так как она доступна только для чтения",
    cannotDeleteColumnReadOnly:
      "Нельзя удалить столбец, так как он доступен только для чтения",
    cannotInsertOnRowReadOnly:
      "Нельзя вставить в строку, так как она доступна только для чтения",
    cannotInsertOnColumnReadOnly:
      "Нельзя вставить в столбец, так как он доступен только для чтения",
    rowOverLimit: "Превышен лимит строк (10000)",
    columnOverLimit: "Превышен лимит столбцов (1000)",
  },
  comment: {
    insert: "Вставить",
    edit: "Редактировать",
    delete: "Удалить",
    showOne: "Показать/Скрыть",
    showAll: "Показать/Скрыть все",
  },
  screenshot: {
    screenshotTipNoSelection: "Пожалуйста, выберите область для скриншота",
    screenshotTipTitle: "Предупреждение!",
    screenshotTipHasMerge:
      "Эта операция не может быть выполнена на объединенных ячейках",
    screenshotTipHasMulti:
      "Эта операция не может быть выполнена на нескольких выделенных областях",
    screenshotTipSuccess: "Успешно",
    screenshotImageName: "Скриншот",

    downLoadClose: "Закрыть",
    downLoadCopy: "Копировать в буфер обмена",
    downLoadBtn: "Скачать",
    browserNotTip: "Не поддерживается браузером IE!",
    rightclickTip:
      'Пожалуйста, нажмите правой кнопкой мыши и выберите "Копировать" на изображении',
    successTip:
      'Успешно (если вставка не удалась, попробуйте правой кнопкой мыши выбрать "Копировать изображение")',
  },
  splitText: {
    splitDelimiters: "Разделители",
    splitOther: "Другой",
    splitContinueSymbol:
      "Последовательные разделители рассматриваются как один",
    splitDataPreview: "Предварительный просмотр",
    splitTextTitle: "Разделить текст",
    splitConfirmToExe: "Здесь уже есть данные, хотите их заменить?",
    splitSymbols: [
      { name: "Табуляция", value: "Tab" },
      { name: "Точка с запятой", value: "semicolon" },
      { name: "Запятая", value: "comma" },
      { name: "Пробел", value: "space" },
    ],

    tipNoMulti:
      "Невозможно выполнить эту операцию для нескольких выделенных областей, пожалуйста, выберите одну область и попробуйте снова",
    tipNoMultiColumn:
      "Одновременно можно преобразовать только один столбец данных. Выбранная область может содержать несколько строк, но не несколько столбцов. Пожалуйста, выберите один диапазон столбца и попробуйте снова",
    tipNoSelect: "Вы не можете разделить ячейку без ее выделения",
  },
  imageText: {
    imageSetting: "Настройки изображения",
    close: "Закрыть",
    conventional: "Обычный",
    moveCell1: "Перемещать и изменять размер ячеек",
    moveCell2: "Перемещать, но не изменять размер ячейки",
    moveCell3: "Не перемещать и не изменять размер ячейки",
    fixedPos: "Фиксированная позиция",
    border: "Граница",
    width: "Ширина",
    radius: "Радиус",
    style: "Стиль",
    solid: "Сплошной",
    dashed: "Пунктирный",
    dotted: "Точечный",
    double: "Двойной",
    color: "Цвет",
  },
  punctuation: {
    tab: "Табуляция",
    semicolon: "Точка с запятой",
    comma: "Запятая",
    space: "Пробел",
  },
  findAndReplace: {
    find: "Найти",
    replace: "Заменить",
    goto: "Перейти",
    location: "Местоположение",
    formula: "Формула",
    date: "Дата",
    number: "Число",
    string: "Строка",
    error: "Ошибка",
    condition: "Условие",
    rowSpan: "Объединение строк",
    columnSpan: "Объединение столбцов",
    locationExample: "Местоположение",
    lessTwoRowTip: "Пожалуйста, выберите как минимум две строки",
    lessTwoColumnTip: "Пожалуйста, выберите как минимум два столбца",

    findTextbox: "Искать содержимое",
    replaceTextbox: "Заменить содержимое",

    regexTextbox: "Регулярное выражение",
    wholeTextbox: "Целое слово",
    distinguishTextbox: "С учетом регистра",

    allReplaceBtn: "Заменить всё",
    replaceBtn: "Заменить",
    allFindBtn: "Найти всё",
    findBtn: "Найти далее",

    noFindTip: "Содержимое не найдено",
    modeTip: "Эта операция недоступна в этом режиме",

    searchTargetSheet: "Лист",
    searchTargetCell: "Ячейка",
    searchTargetValue: "Значение",

    searchInputTip: "Введите содержимое для поиска",

    noReplceTip: "Нет данных для замены",
    noMatchTip: "Совпадений не найдено",

    successTip: "Найдено элементов: ${xlength}",

    locationConstant: "Константа",
    locationFormula: "Формула",
    locationDate: "Дата",
    locationDigital: "Число",
    locationString: "Строка",
    locationBool: "Логическое",
    locationError: "Ошибка",
    locationNull: "Пусто",
    locationCondition: "Условное форматирование",
    locationRowSpan: "Объединение строк",
    locationColumnSpan: "Объединение столбцов",

    locationTiplessTwoRow: "Пожалуйста, выберите как минимум две строки",
    locationTiplessTwoColumn: "Пожалуйста, выберите как минимум два столбца",
    locationTipNotFindCell: "Ячейка не найдена",
  },
  sheetconfig: {
    delete: "Удалить",
    copy: "Копировать",
    rename: "Переименовать",
    changeColor: "Изменить цвет",
    hide: "Скрыть",
    unhide: "Показать",
    moveLeft: "Переместить влево",
    moveRight: "Переместить вправо",
    resetColor: "Сбросить цвет",
    cancelText: "Отмена",
    chooseText: "Подтвердить цвет",
    focus: "Фокус",

    tipNameRepeat: "Имя вкладки не может повторяться! Пожалуйста, измените",
    noMoreSheet:
      "В книге должен быть хотя бы один видимый лист. Чтобы удалить выбранный лист, вставьте новый или отобразите скрытый лист.",
    confirmDelete: "Вы уверены, что хотите удалить",
    redoDelete: "Можно отменить с помощью Ctrl+Z",
    noHide: "Невозможно скрыть, должен остаться хотя бы один лист",
    chartEditNoOpt:
      "Эта операция недоступна в режиме редактирования диаграммы!",
    sheetNameSpecCharError: "Имя не может содержать: [ ] : ? * / ' \"",
    sheetNamecannotIsEmptyError: "Имя листа не может быть пустым",
  },
  conditionformat: {
    conditionformat_greaterThan: "Формат по условию - Больше чем",
    conditionformat_greaterThan_title: "Форматировать ячейки, если больше чем",
    conditionformat_lessThan: "Формат по условию - Меньше чем",
    conditionformat_lessThan_title: "Форматировать ячейки, если меньше чем",
    conditionformat_between: "Формат по условию - Между",
    conditionformat_between_title: "Форматировать ячейки со значением между",
    conditionformat_equal: "Формат по условию - Равно",
    conditionformat_equal_title: "Форматировать ячейки, равные",
    conditionformat_textContains: "Формат по условию - Содержит текст",
    conditionformat_textContains_title:
      "Форматировать ячейки, содержащие текст",
    conditionformat_occurrenceDate: "Формат по условию - Дата",
    conditionformat_occurrenceDate_title:
      "Форматировать ячейки с указанными датами",
    conditionformat_duplicateValue:
      "Формат по условию - Дублирующееся значение",
    conditionformat_duplicateValue_title:
      "Форматировать ячейки с указанными типами значений",
    conditionformat_top10: "Формат по условию - Топ 10",
    conditionformat_top10_percent: "Формат по условию - Топ 10%",
    conditionformat_top10_title:
      "Форматировать ячейки с наибольшими значениями",
    conditionformat_last10: "Формат по условию - Последние 10",
    conditionformat_last10_percent: "Формат по условию - Последние 10%",
    conditionformat_last10_title:
      "Форматировать ячейки с наименьшими значениями",
    conditionformat_aboveAverage: "Формат по условию - Выше среднего",
    conditionformat_aboveAverage_title: "Форматировать ячейки выше среднего",
    conditionformat_belowAverage: "Формат по условию - Ниже среднего",
    conditionformat_belowAverage_title: "Форматировать ячейки ниже среднего",
    rule: "Правило",
    newRule: "Новое правило",
    editRule: "Редактировать правило",
    deleteRule: "Удалить правило",
    deleteCellRule: "Удалить правило ячейки",
    deleteSheetRule: "Удалить правило листа",
    manageRules: "Управление правилами",
    showRules: "Показать правила форматирования",
    highlightCellRules: "Правила выделения ячеек",
    itemSelectionRules: "Правила выбора элементов",
    conditionformatManageRules: "Менеджер правил условного форматирования",
    format: "Формат",
    setFormat: "Установить формат",
    setAs: "Установить как",
    setAsByArea: "Для выбранной области установить как",
    applyRange: "Применить диапазон",
    selectRange: "Выбрать область применения",
    selectRange_percent: "Процент выбранного диапазона",
    selectRange_average: "Среднее значение в выбранном диапазоне",
    selectRange_value: "Значение в выбранном диапазоне",
    pleaseSelectRange: "Пожалуйста, выберите область применения",
    selectDataRange: "Выбрать диапазон данных",
    selectCell: "Выбрать ячейку",
    pleaseSelectCell: "Пожалуйста, выберите ячейку",
    pleaseSelectADate: "Пожалуйста, выберите дату",
    pleaseEnterInteger: "Пожалуйста, введите целое число от 1 до 1000",
    onlySingleCell: "Можно ссылаться только на одну ячейку",
    conditionValueCanOnly:
      "Условное значение может быть только числом или одной ячейкой",
    ruleTypeItem1: "Форматировать все ячейки на основе их значений",
    ruleTypeItem2: "Форматировать только ячейки, содержащие",
    ruleTypeItem2_title: "Только для ячеек, соответствующих следующим условиям",
    ruleTypeItem3: "Форматировать только топ или низкие значения",
    ruleTypeItem3_title: "Если значение входит в следующий рейтинг",
    ruleTypeItem4: "Форматировать только значения выше или ниже среднего",
    ruleTypeItem4_title: "Если значение удовлетворяет следующим условиям",
    ruleTypeItem5: "Форматировать только уникальные или повторяющиеся значения",
    ruleTypeItem6: "Использовать формулы для определения форматируемых ячеек",
    formula: "Формула",
    textColor: "Цвет текста",
    cellColor: "Цвет ячейки",
    confirm: "Подтвердить",
    confirmColor: "Подтвердить цвет",
    cancel: "Отмена",
    close: "Закрыть",
    clearColorSelect: "Очистить выбор цвета",
    sheet: "Лист",
    currentSheet: "Текущий лист",
    dataBar: "Гистограмма данных",
    dataBarColor: "Цвет гистограммы данных",
    gradientDataBar_1: "Градиентная гистограмма (синий-белый)",
    gradientDataBar_2: "Градиентная гистограмма (зеленый-белый)",
    gradientDataBar_3: "Градиентная гистограмма (красный-белый)",
    gradientDataBar_4: "Градиентные полосы (оранжевый-белый)",
    gradientDataBar_5: "Градиентные полосы (голубой-белый)",
    gradientDataBar_6: "Градиентная гистограмма (фиолетовый-белый)",
    solidColorDataBar_1: "Сплошная гистограмма (синий)",
    solidColorDataBar_2: "Сплошная гистограмма (зеленый)",
    solidColorDataBar_3: "Сплошная гистограмма (красный)",
    solidColorDataBar_4: "Сплошная гистограмма (оранжевый)",
    solidColorDataBar_5: "Сплошная гистограмма (голубой)",
    solidColorDataBar_6: "Сплошная гистограмма (фиолетовый)",
    colorGradation: "Градиент цвета",
    colorGradation_1: "Градиент (зеленый-желтый-красный)",
    colorGradation_2: "Градиент (красный-желтый-зеленый)",
    colorGradation_3: "Градиент (зеленый-белый-красный)",
    colorGradation_4: "Градиент (красный-белый-зеленый)",
    colorGradation_5: "Градиент синий-белый-красный",
    colorGradation_6: "Градиент красный-белый-синий",
    colorGradation_7: "Градиент белый-красный",
    colorGradation_8: "Градиент красный-белый",
    colorGradation_9: "Градиент зеленый-белый",
    colorGradation_10: "Градиент белый-зеленый",
    colorGradation_11: "Градиент зеленый-желтый",
    colorGradation_12: "Градиент желтый-зеленый",
    icons: "Иконки",
    pleaseSelectIcon: "Пожалуйста, нажмите, чтобы выбрать группу иконок:",
    cellValue: "Значение ячейки",
    specificText: "Определенный текст",
    occurrenceDate: "Дата",
    greaterThan: "Больше чем",
    lessThan: "Меньше чем",
    between: "Между",
    equal: "Равно",
    in: "Входит в",
    between2: "",
    contain: "Содержит",
    textContains: "Текст содержит",
    duplicateValue: "Дублирующееся значение",
    uniqueValue: "Уникальное значение",
    top: "Верх",
    top10: "Топ 10",
    top10_percent: "Топ 10%",
    last: "Последний",
    last10: "Последние 10",
    last10_percent: "Последние 10%",
    oneself: "",
    above: "Выше",
    aboveAverage: "Выше среднего",
    below: "Ниже",
    belowAverage: "Ниже среднего",
    all: "Все",
    yesterday: "Вчера",
    today: "Сегодня",
    tomorrow: "Завтра",
    lastWeek: "Прошлая неделя",
    thisWeek: "Эта неделя",
    lastMonth: "Прошлый месяц",
    thisMonth: "Этот месяц",
    lastYear: "Прошлый год",
    thisYear: "Этот год",
    last7days: "Последние 7 дней",
    last30days: "Последние 30 дней",
    next7days: "Следующие 7 дней",
    next30days: "Следующие 30 дней",
    next60days: "Следующие 60 дней",
    chooseRuleType: "Выберите тип правила",
    editRuleDescription: "Редактировать описание правила",
    newFormatRule: "Новое правило форматирования",
    editFormatRule: "Редактировать правило форматирования",
    formatStyle: "Стиль",
    fillType: "Заливка",
    color: "Цвет",
    twocolor: "Двухцветный",
    tricolor: "Трехцветный",
    multicolor: "Многоцветный",
    grayColor: "Серый цвет",
    gradient: "Градиент",
    solid: "Сплошной",
    maxValue: "Максимальное значение",
    medianValue: "Медианное значение",
    minValue: "Минимальное значение",
    direction: "Направление",
    threeWayArrow: "Трехсторонняя стрелка",
    fourWayArrow: "Четырехсторонняя стрелка",
    fiveWayArrow: "Пятисторонняя стрелка",
    threeTriangles: "Три треугольника",
    shape: "Форма",
    threeColorTrafficLight: "Трехцветный светофор",
    fourColorTrafficLight: "Четырехцветный светофор",
    threeSigns: "Три знака",
    greenRedBlackGradient: "Градиент зелено-красно-черный",
    rimless: "Без рамки",
    bordered: "С рамкой",
    mark: "Метка",
    threeSymbols: "Три символа",
    tricolorFlag: "Трехцветный флаг",
    circled: "В круге",
    noCircle: "Без круга",
    grade: "Оценка",
    grade4: "4 уровня",
    grade5: "5 уровней",
    threeStars: "3 звезды",
    fiveQuadrantDiagram: "Диаграмма пяти квадрантов",
    fiveBoxes: "5 блоков",
  },
  insertLink: {
    linkText: "Отображаемый текст",
    linkType: "Тип ссылки",
    linkAddress: "Адрес ссылки",
    linkSheet: "Лист",
    linkCell: "Диапазон ячеек",
    linkTooltip: "Подсказка",
    selectCellRange: "Выберите диапазон ячеек",
    cellRangePlaceholder:
      "Выберите ячейки с помощью курсора или введите вручную",
    placeholder1: "Введите адрес веб-ссылки",
    placeholder2: "Введите ячейку для ссылки, например A1",
    placeholder3: "Введите текст подсказки",
    tooltipInfo1: "Введите корректную ссылку",
    invalidCellRangeTip:
      "Введите правильный диапазон ячеек, например, Sheet1!A1:C8",
    openLink: "Открыть ссылку",
    goTo: "Перейти к ${linkAddress}",
  },
  linkTypeList: [
    { text: "Веб-страницы", value: "webpage" },
    { text: "Диапазон ячеек", value: "cellrange" },
    { text: "Лист", value: "sheet" },
  ],
  dataVerification: {
    cellRange: "Диапазон ячеек",
    selectCellRange: "Нажмите, чтобы выбрать диапазон ячеек",
    selectCellRange2: "Пожалуйста, выберите диапазон ячеек",
    verificationCondition: "Условие проверки",
    allowMultiSelect: "Разрешить множественный выбор",
    dropdown: "Выпадающий список",
    checkbox: "Флажок",
    number: "Число",
    number_integer: "Целое число",
    number_decimal: "Десятичное число",
    text_content: "Текстовое содержимое",
    text_length: "Длина текста",
    date: "Дата",
    validity: "Действительность",
    placeholder1: "Введите параметры, разделенные запятыми, например 1,2,3,4,5",
    placeholder2: "Введите содержимое",
    placeholder3: "Числовое значение, например 10",
    placeholder4: "Введите указанный текст",
    placeholder5: "Введите подсказку, отображаемую при выборе ячейки",
    selected: "Выбрано",
    notSelected: "Не выбрано",
    between: "Между",
    notBetween: "Не между",
    equal: "Равно",
    notEqualTo: "Не равно",
    moreThanThe: "Больше чем",
    lessThan: "Меньше чем",
    greaterOrEqualTo: "Больше или равно",
    lessThanOrEqualTo: "Меньше или равно",
    include: "Включает",
    exclude: "Исключает",
    earlierThan: "Ранее чем",
    noEarlierThan: "Не ранее чем",
    laterThan: "Позднее чем",
    noLaterThan: "Не позднее чем",
    identificationNumber: "Идентификационный номер",
    phoneNumber: "Номер телефона",
    remote: "Автоматический удаленный выбор",
    prohibitInput: "Запретить ввод при недопустимых данных",
    hintShow: "Показывать подсказку при выборе ячейки",
    deleteVerification: "Удалить проверку",
    tooltipInfo1: "Опции выпадающего списка не могут быть пустыми",
    tooltipInfo2: "Содержимое флажка не может быть пустым",
    tooltipInfo3: "Введенное значение не является числом",
    tooltipInfo4: "Значение 2 не может быть меньше значения 1",
    tooltipInfo5: "Текстовое содержимое не может быть пустым",
    tooltipInfo6: "Введенное значение не является датой",
    tooltipInfo7: "Дата 2 не может быть меньше даты 1",
    textlengthInteger:
      "Длина текста должна быть целым числом, большим или равным 0",
  },
  formula: {
    sum: "Сумма",
    average: "Среднее",
    count: "Количество",
    max: "Максимум",
    min: "Минимум",
    ifGenerate: "Генератор формулы IF",
    find: "Узнать больше",

    tipNotBelongToIf: "Эта функция ячейки не относится к формуле IF!",
    tipSelectCell: "Пожалуйста, выберите ячейку для вставки функции",

    ifGenCompareValueTitle: "Значение для сравнения",
    ifGenSelectCellTitle: "Нажмите, чтобы выбрать ячейку",
    ifGenRangeTitle: "Диапазон",
    ifGenRangeTo: "до",
    ifGenRangeEvaluate: "Оценка диапазона",
    ifGenSelectRangeTitle: "Нажмите, чтобы выбрать диапазон",
    ifGenCutWay: "Способ разделения",
    ifGenCutSame: "Одинаковое значение разделения",
    ifGenCutNpiece: "Разделение на N частей",
    ifGenCutCustom: "Пользовательский",
    ifGenCutConfirm: "Подтвердить",

    ifGenTipSelectCell: "Выберите ячейки",
    ifGenTipSelectCellPlace: "Пожалуйста, выберите ячейки",

    ifGenTipSelectRange: "Выберите диапазон",
    ifGenTipSelectRangePlace: "Пожалуйста, выберите диапазон",

    ifGenTipNotNullValue: "Значение для сравнения не может быть пустым!",
    ifGenTipLableTitile: "Метка",
    ifGenTipRangeNotforNull: "Диапазон не может быть пустым!",
    ifGenTipCutValueNotforNull: "Значение разделения не может быть пустым!",
    ifGenTipNotGenCondition: "Нет доступных условий для генерации!",
  },
  formulaMore: {
    valueTitle: "Значение",
    tipSelectDataRange: "Выберите диапазон данных",
    tipDataRangeTile: "Диапазон данных",
    findFunctionTitle: "Поиск функции",
    tipInputFunctionName: "Название функции или краткое описание",

    Array: "Массив",
    Database: "База данных",
    Date: "Дата",
    Engineering: "Инженерные",
    Filter: "Фильтр",
    Financial: "Финансовые",
    luckysheet: "Luckysheet",
    other: "Другое",
    Logical: "Логические",
    Lookup: "Поиск",
    Math: "Математика",
    Operator: "Оператор",
    Parser: "Парсер",
    Statistical: "Статистика",
    Text: "Текст",
    dataMining: "Анализ данных",

    selectFunctionTitle: "Выберите функцию",
    calculationResult: "Результат",

    tipSuccessText: "Успешно",
    tipParamErrorText: "Ошибка типа параметра",

    helpClose: "Закрыть",
    helpCollapse: "Свернуть",
    helpExample: "Пример",
    helpAbstract: "Описание",

    execfunctionError: "Ошибка в формуле",
    execfunctionSelfError:
      "Формула не может ссылаться на свою собственную ячейку",
    execfunctionSelfErrorResult:
      "Формула не может ссылаться на свою собственную ячейку, это приведет к некорректным вычислениям",

    allowRepeatText: "Можно повторять",
    allowOptionText: "Необязательно",

    selectCategory: "Или выберите категорию",
  },
  drag: {
    noMerge: "Невозможно выполнить эту операцию на объединенных ячейках",
    affectPivot:
      "Это изменение нельзя применить к выбранной ячейке, так как оно повлияет на сводную таблицу!",
    noMulti:
      "Невозможно выполнить эту операцию для нескольких выделенных областей, пожалуйста, выберите одну область",
    noPaste:
      "Невозможно вставить этот контент сюда, выберите ячейку в области вставки и попробуйте снова",
    noPartMerge:
      "Невозможно выполнить эту операцию на частично объединенных ячейках",

    inputCorrect: "Пожалуйста, введите правильное значение",
    notLessOne: "Количество строк и столбцов не может быть меньше 1",
    offsetColumnLessZero: "Смещение столбца не может быть отрицательным!",

    pasteMustKeybordAlert:
      "Для копирования и вставки в таблице используйте: Ctrl + C для копирования, Ctrl + V для вставки, Ctrl + X для вырезания",
    pasteMustKeybordAlertHTMLTitle: "Копирование и вставка в таблице",
    pasteMustKeybordAlertHTML:
      "<span style='line-height: 1.0;font-size:36px;font-weight: bold;color:#666;'>Ctrl + C</span>&nbsp;&nbsp;进行复制<br/><span style='line-height: 1.0;font-size:36px;font-weight: bold;color:#666;'>Ctrl + V</span>&nbsp;&nbsp;进行粘贴<br/><span style='line-height: 1.0;font-size:36px;font-weight: bold;color:#666;'>Ctrl + X</span>&nbsp;&nbsp;进行剪切",
  },
  pivotTable: {
    title: "Сводная таблица",
    closePannel: "Закрыть",
    editRange: "Диапазон",
    tipPivotFieldSelected: "Выберите поля",
    tipClearSelectedField: "Очистить все поля",
    btnClearSelectedField: "Очистить",
    btnFilter: "Фильтр",
    titleRow: "Строка",
    titleColumn: "Столбец",
    titleValue: "Значение",
    tipShowColumn: "Статистические поля отображаются в виде столбцов",
    tipShowRow: "Статистические поля отображаются в виде строк",

    titleSelectionDataRange: "Выберите диапазон",
    titleDataRange: "Диапазон данных",

    valueSum: "СУММА",

    valueStatisticsSUM: "Сумма",
    valueStatisticsCOUNT: "Количество",
    valueStatisticsCOUNTA: "Количество A",
    valueStatisticsCOUNTUNIQUE: "Количество уникальных",
    valueStatisticsAVERAGE: "Среднее",
    valueStatisticsMAX: "Максимум",
    valueStatisticsMIN: "Минимум",
    valueStatisticsMEDIAN: "Медиана",
    valueStatisticsPRODUCT: "Произведение",
    valueStatisticsSTDEV: "Стандартное отклонение",

    valueStatisticsSTDEVP: "Стандартное отклонение (общ.)",
    valueStatisticslet: "Дисперсия",
    valueStatisticsVARP: "Дисперсия (общ.)",

    errorNotAllowEdit: "Эта операция запрещена в режиме без редактирования!",
    errorNotAllowMulti:
      "Невозможно выполнить операцию для нескольких выделенных областей. Выберите один диапазон и попробуйте снова",
    errorSelectRange: "Пожалуйста, выберите диапазон для новой сводной таблицы",
    errorIsDamage: "Исходные данные этой сводной таблицы повреждены!",
    errorNotAllowPivotData:
      "Нельзя выбрать сводную таблицу в качестве исходных данных!",
    errorSelectionRange: "Ошибка выбора, неверный диапазон!",
    errorIncreaseRange: "Пожалуйста, расширьте выбранный диапазон!",

    titleAddColumn: "Добавить столбец в сводную таблицу",
    titleMoveColumn: "Переместите столбец в белое поле ниже",
    titleClearColumnFilter: "Очистить фильтр для этого столбца",
    titleFilterColumn: "Фильтр",

    titleSort: "Сортировка",
    titleNoSort: "Без сортировки",
    titleSortAsc: "По возрастанию",
    titleSortDesc: "По убыванию",
    titleSortBy: "Сортировать по",
    titleShowSum: "Показать итог",
    titleStasticTrue: "Да",
    titleStasticFalse: "Нет",
  },
  dropCell: {
    copyCell: "Копировать",
    sequence: "Последовательность",
    onlyFormat: "Только формат",
    noFormat: "Без формата",
    day: "День",
    workDay: "Рабочий день",
    month: "Месяц",
    year: "Год",
    chineseNumber: "Китайские числа",
  },
  imageCtrl: {
    borderTile: "Цвет рамки изображения",
    borderCur: "Цвет",
  },
  protection: {
    protectiontTitle: "Защита",
    enterPassword: "Введите пароль (необязательно)",
    enterHintTitle: "Подсказка при запрете редактирования (необязательно)",
    enterHint:
      "Ячейка или диаграмма, которую вы пытаетесь изменить, находится на защищенном листе. Если вы хотите внести изменения, снимите защиту с листа. Возможно, потребуется ввести пароль",
    swichProtectionTip: "Защитить лист и содержимое заблокированных ячеек",
    authorityTitle: "Разрешить пользователям этого листа:",
    selectLockedCells: "Выбирать заблокированные ячейки",
    selectunLockedCells: "Выбирать разблокированные ячейки",
    formatCells: "Форматировать ячейки",
    formatColumns: "Форматировать столбцы",
    formatRows: "Форматировать строки",
    insertColumns: "Вставлять столбцы",
    insertRows: "Вставлять строки",
    insertHyperlinks: "Вставлять гиперссылки",
    deleteColumns: "Удалять столбцы",
    deleteRows: "Удалять строки",
    sort: "Сортировать",
    filter: "Фильтровать",
    usePivotTablereports: "Использовать сводные таблицы",
    editObjects: "Редактировать объекты",
    editScenarios: "Редактировать сценарии",

    allowRangeTitle: "Разрешить пользователям диапазона:",
    allowRangeAdd: "Добавить...",

    allowRangeAddTitle: "Название",
    allowRangeAddSqrf: "Ссылка",
    selectCellRange: "Нажмите, чтобы выбрать диапазон ячеек",
    selectCellRangeHolder: "Диапазон ячеек",
    allowRangeAddTitlePassword: "Пароль",
    allowRangeAddTitleHint: "Подсказка",
    allowRangeAddTitleHintTitle:
      "Подсказка при установке пароля (необязательно)",
    allowRangeAddtitleDefault: "Введите название диапазона",

    rangeItemDblclick: "Дважды кликните для редактирования",
    rangeItemHasPassword: "Защищено паролем",

    rangeItemErrorTitleNull: "Название отсутствует",
    rangeItemErrorRangeNull: "Ссылка отсутствует",
    rangeItemErrorRange: "Ошибка ссылки",

    validationTitle: "Проверка пароля",
    validationTips: "Для снятия защиты с листа необходимо ввести пароль",
    validationInputHint: "Введите пароль",

    checkPasswordNullalert: "Требуется пароль!",
    checkPasswordWrongalert: "Неверный пароль, попробуйте еще раз!",

    checkPasswordSucceedalert: "Защита снята!",
    defaultRangeHintText: "Ячейка защищена паролем.",
    defaultSheetHintText:
      "Ячейка или диаграмма находится на защищенном листе." +
      " Чтобы внести изменения, снимите защиту с листа." +
      " Возможно, потребуется ввести пароль",
  },
  cellFormat: {
    cellFormatTitle: "Формат ячеек",
    protection: "Защита",
    locked: "Заблокировано",
    hidden: "Скрыто",
    protectionTips:
      "Чтобы заблокировать ячейки или скрыть формулы, " +
      "защитите лист. В панели инструментов нажмите " +
      "кнопку 'Защитить лист'",
    tipsPart: "Частично отмечено",
    tipsAll: "Отмечено все",

    selectionIsNullAlert: "Требуется выбор!",
    sheetDataIsNullAlert: "Ошибка, данные отсутствуют!",
  },
  print: {
    normalBtn: "Обычный",
    layoutBtn: "Разметка страницы",
    pageBtn: "Предварительный просмотр разрыва страницы",

    menuItemPrint: "Печать (Ctrl+P)",
    menuItemAreas: "Области печати",
    menuItemRows: "Печатные строки",
    menuItemColumns: "Печатные столбцы",
  },
  edit: {
    typing: "ввод",
  },
  websocket: {
    success: "Успешное подключение к WebSocket",
    refresh:
      "Произошла ошибка в соединении WebSocket, " +
      "пожалуйста, обновите страницу!",
    wait: "Произошла ошибка в соединении WebSocket, пожалуйста, подождите!",
    close: "Соединение WebSocket закрыто",
    contact:
      "Произошла ошибка связи с сервером, обновите " +
      "страницу и попробуйте снова. Если ошибка не исчезла," +
      " свяжитесь с администратором!",
    support: "Текущий браузер не поддерживает WebSocket",
  },
};
